"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(y,e){function T(e){return null!=e&&e===e.window}var t=[],i=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,o=t.indexOf,n={},r=n.toString,S=n.hasOwnProperty,a=S.toString,u=a.call(Object),v={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},M=y.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function m(e,t,n){var i,o,r=(n=n||M).createElement("script");if(r.text=e,t)for(i in c)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function P(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?n[r.call(e)]||"object":_typeof(e)}var d="3.5.1",C=function e(t,n){return new e.fn.init(t,n)};function p(e){var t=!!e&&"length"in e&&e.length,n=P(e);return!b(e)&&!T(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}C.fn=C.prototype={jquery:d,constructor:C,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(n){return this.pushStack(C.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(C.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},C.extend=C.fn.extend=function(){var e,t,n,i,o,r,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"===_typeof(a)||b(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)i=e[t],"__proto__"!==t&&a!==i&&(u&&i&&(C.isPlainObject(i)||(o=Array.isArray(i)))?(n=a[t],r=o&&!Array.isArray(n)?[]:o||C.isPlainObject(n)?n:{},o=!1,a[t]=C.extend(u,r,i)):void 0!==i&&(a[t]=i));return a},C.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==r.call(e))&&(!(t=i(e))||"function"==typeof(n=S.call(t,"constructor")&&t.constructor)&&a.call(n)===u)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){m(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(p(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?C.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:o.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,a=!n;o<r;o++)!t(e[o],o)!=a&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,a=[];if(p(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&a.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&a.push(o);return g(a)},guid:1,support:v}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=t[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var f=function(n){function d(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function o(){A()}var e,f,m,r,a,h,p,T,P,l,u,A,y,s,M,g,c,S,v,C="sizzle"+ +new Date,b=n.document,x=0,i=0,G=le(),w=le(),E=le(),H=le(),B=function(e,t){return e===t&&(u=!0),0},D={}.hasOwnProperty,t=[],I=t.pop,L=t.push,N=t.push,k=t.slice,O=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},V="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",X="\\["+R+"*("+F+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+R+"*\\]",W=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+X+")*)|.*)\\)|)",_=new RegExp(R+"+","g"),j=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),q=new RegExp("^"+R+"*,"+R+"*"),U=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),K=new RegExp(R+"|>"),z=new RegExp(W),$=new RegExp("^"+F+"$"),Q={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+X),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+V+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,ie=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),oe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=ve(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{N.apply(t=k.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){N={apply:t.length?function(e,t){L.apply(e,k.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(t,e,n,i){var o,r,a,s,l,u,c,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&(A(e),e=e||y,M)){if(11!==p&&(l=te.exec(t)))if(o=l[1]){if(9===p){if(!(a=e.getElementById(o)))return n;if(a.id===o)return n.push(a),n}else if(d&&(a=d.getElementById(o))&&v(e,a)&&a.id===o)return n.push(a),n}else{if(l[2])return N.apply(n,e.getElementsByTagName(t)),n;if((o=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return N.apply(n,e.getElementsByClassName(o)),n}if(f.qsa&&!H[t+" "]&&(!g||!g.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,d=e,1===p&&(K.test(t)||U.test(t))){for((d=ne.test(t)&&Te(e.parentNode)||e)===e&&f.scope||((s=e.getAttribute("id"))?s=s.replace(oe,re):e.setAttribute("id",s=C)),r=(u=h(t)).length;r--;)u[r]=(s?"#"+s:":scope")+" "+Se(u[r]);c=u.join(",")}try{return N.apply(n,d.querySelectorAll(c)),n}catch(e){H(t,!0)}finally{s===C&&e.removeAttribute("id")}}}return T(t.replace(j,"$1"),e,n,i)}function le(){var n=[];function i(e,t){return n.push(e+" ")>m.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function ue(e){return e[C]=!0,e}function ce(e){var t=y.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)m.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function he(a){return ue(function(r){return r=+r,ue(function(e,t){for(var n,i=a([],e.length,r),o=i.length;o--;)e[n=i[o]]&&(e[n]=!(t[n]=e[n]))})})}function Te(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=se.support={},a=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},A=se.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:b;return i!=y&&9===i.nodeType&&i.documentElement&&(s=(y=i).documentElement,M=!a(y),b!=y&&(n=y.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",o,!1):n.attachEvent&&n.attachEvent("onunload",o)),f.scope=ce(function(e){return s.appendChild(e).appendChild(y.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=ce(function(e){return e.appendChild(y.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=ee.test(y.getElementsByClassName),f.getById=ce(function(e){return s.appendChild(e).id=C,!y.getElementsByName||!y.getElementsByName(C).length}),f.getById?(m.filter.ID=function(e){var t=e.replace(ie,d);return function(e){return e.getAttribute("id")===t}},m.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n=t.getElementById(e);return n?[n]:[]}}):(m.filter.ID=function(e){var n=e.replace(ie,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},m.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),m.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[o++];)1===n.nodeType&&i.push(n);return i},m.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&M)return t.getElementsByClassName(e)},c=[],g=[],(f.qsa=ee.test(y.querySelectorAll))&&(ce(function(e){var t;s.appendChild(e).innerHTML="<a id='"+C+"'></a><select id='"+C+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+R+"*(?:value|"+V+")"),e.querySelectorAll("[id~="+C+"-]").length||g.push("~="),(t=y.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+C+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=y.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(f.matchesSelector=ee.test(S=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ce(function(e){f.disconnectedMatch=S.call(e,"*"),S.call(e,"[s!='']:x"),c.push("!=",W)}),g=g.length&&new RegExp(g.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(s.compareDocumentPosition),v=t||ee.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},B=t?function(e,t){if(e===t)return u=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==y||e.ownerDocument==b&&v(b,e)?-1:t==y||t.ownerDocument==b&&v(b,t)?1:l?O(l,e)-O(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,a=[e],s=[t];if(!o||!r)return e==y?-1:t==y?1:o?-1:r?1:l?O(l,e)-O(l,t):0;if(o===r)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?pe(a[i],s[i]):a[i]==b?-1:s[i]==b?1:0}),y},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(A(e),f.matchesSelector&&M&&!H[t+" "]&&(!c||!c.test(t))&&(!g||!g.test(t)))try{var n=S.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){H(t,!0)}return 0<se(t,y,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=y&&A(e),v(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=y&&A(e);var n=m.attrHandle[t.toLowerCase()],i=n&&D.call(m.attrHandle,t.toLowerCase())?n(e,t,!M):void 0;return void 0!==i?i:f.attributes||!M?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(oe,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],i=0,o=0;if(u=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(B),u){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return l=null,e},r=se.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(m=se.selectors={cacheLength:50,createPseudo:ue,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=G[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&G(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,o){return function(e){var t=se.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===o:"!="===i?t!==o:"^="===i?o&&0===t.indexOf(o):"*="===i?o&&-1<t.indexOf(o):"$="===i?o&&t.slice(-o.length)===o:"~="===i?-1<(" "+t.replace(_," ")+" ").indexOf(o):"|="===i&&(t===o||t.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,e,t,T,g){var S="nth"!==h.slice(0,3),v="last"!==h.slice(-4),b="of-type"===e;return 1===T&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var i,o,r,a,s,l,u=S!=v?"nextSibling":"previousSibling",c=e.parentNode,d=b&&e.nodeName.toLowerCase(),p=!n&&!b,f=!1;if(c){if(S){for(;u;){for(a=e;a=a[u];)if(b?a.nodeName.toLowerCase()===d:1===a.nodeType)return!1;l=u="only"===h&&!l&&"nextSibling"}return!0}if(l=[v?c.firstChild:c.lastChild],v&&p){for(f=(s=(i=(o=(r=(a=c)[C]||(a[C]={}))[a.uniqueID]||(r[a.uniqueID]={}))[h]||[])[0]===x&&i[1])&&i[2],a=s&&c.childNodes[s];a=++s&&a&&a[u]||(f=s=0)||l.pop();)if(1===a.nodeType&&++f&&a===e){o[h]=[x,s,f];break}}else if(p&&(f=s=(i=(o=(r=(a=e)[C]||(a[C]={}))[a.uniqueID]||(r[a.uniqueID]={}))[h]||[])[0]===x&&i[1]),!1===f)for(;(a=++s&&a&&a[u]||(f=s=0)||l.pop())&&((b?a.nodeName.toLowerCase()!==d:1!==a.nodeType)||!++f||(p&&((o=(r=a[C]||(a[C]={}))[a.uniqueID]||(r[a.uniqueID]={}))[h]=[x,f]),a!==e)););return(f-=g)===T||f%T==0&&0<=f/T}}},PSEUDO:function(e,r){var t,a=m.pseudos[e]||m.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[C]?a(r):1<a.length?(t=[e,e,"",r],m.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,t){for(var n,i=a(e,r),o=i.length;o--;)e[n=O(e,i[o])]=!(t[n]=i[o])}):function(e){return a(e,0,t)}):a}},pseudos:{not:ue(function(e){var i=[],o=[],s=p(e.replace(j,"$1"));return s[C]?ue(function(e,t,n,i){for(var o,r=s(e,null,i,[]),a=e.length;a--;)(o=r[a])&&(e[a]=!(t[a]=o))}):function(e,t,n){return i[0]=e,s(i,null,n,o),i[0]=null,!o.pop()}}),has:ue(function(t){return function(e){return 0<se(t,e).length}}),contains:ue(function(t){return t=t.replace(ie,d),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:ue(function(n){return $.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(ie,d).toLowerCase(),function(e){var t;do{if(t=M?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===y.activeElement&&(!y.hasFocus||y.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!m.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:he(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=m.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})m.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})m.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function ge(){}function Se(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ve(s,e,t){var l=e.dir,u=e.next,c=u||l,d=t&&"parentNode"===c,p=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return s(e,t,n);return!1}:function(e,t,n){var i,o,r,a=[x,p];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&s(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(o=(r=e[C]||(e[C]={}))[e.uniqueID]||(r[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((i=o[c])&&i[0]===x&&i[1]===p)return a[2]=i[2];if((o[c]=a)[2]=s(e,t,n))return!0}return!1}}function be(o){return 1<o.length?function(e,t,n){for(var i=o.length;i--;)if(!o[i](e,t,n))return!1;return!0}:o[0]}function me(e,t,n,i,o){for(var r,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(r=e[s])&&(n&&!n(r,i,o)||(a.push(r),u&&t.push(s)));return a}function Pe(f,h,T,g,S,e){return g&&!g[C]&&(g=Pe(g)),S&&!S[C]&&(S=Pe(S,e)),ue(function(e,t,n,i){var o,r,a,s=[],l=[],u=t.length,c=e||function(e,t,n){for(var i=0,o=t.length;i<o;i++)se(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!f||!e&&h?c:me(c,s,f,n,i),p=T?S||(e?f:u||g)?[]:t:d;if(T&&T(d,p,n,i),g)for(o=me(p,l),g(o,[],n,i),r=o.length;r--;)(a=o[r])&&(p[l[r]]=!(d[l[r]]=a));if(e){if(S||f){if(S){for(o=[],r=p.length;r--;)(a=p[r])&&o.push(d[r]=a);S(null,p=[],o,i)}for(r=p.length;r--;)(a=p[r])&&-1<(o=S?O(e,a):s[r])&&(e[o]=!(t[o]=a))}}else p=me(p===t?p.splice(u,p.length):p),S?S(null,t,p,i):N.apply(t,p)})}function Ae(g,S){function e(e,t,n,i,o){var r,a,s,l=0,u="0",c=e&&[],d=[],p=P,f=e||b&&m.find.TAG("*",o),h=x+=null==p?1:Math.random()||.1,T=f.length;for(o&&(P=t==y||t||o);u!==T&&null!=(r=f[u]);u++){if(b&&r){for(a=0,t||r.ownerDocument==y||(A(r),n=!M);s=g[a++];)if(s(r,t||y,n)){i.push(r);break}o&&(x=h)}v&&((r=!s&&r)&&l--,e&&c.push(r))}if(l+=u,v&&u!==l){for(a=0;s=S[a++];)s(c,d,t,n);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=I.call(i));d=me(d)}N.apply(i,d),o&&!e&&0<d.length&&1<l+S.length&&se.uniqueSort(i)}return o&&(x=h,P=p),c}var v=0<S.length,b=0<g.length;return v?ue(e):e}return ge.prototype=m.filters=m.pseudos,m.setFilters=new ge,h=se.tokenize=function(e,t){var n,i,o,r,a,s,l,u=w[e+" "];if(u)return t?0:u.slice(0);for(a=e,s=[],l=m.preFilter;a;){for(r in n&&!(i=q.exec(a))||(i&&(a=a.slice(i[0].length)||a),s.push(o=[])),n=!1,(i=U.exec(a))&&(n=i.shift(),o.push({value:n,type:i[0].replace(j," ")}),a=a.slice(n.length)),m.filter)!(i=Q[r].exec(a))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):w(e,s).slice(0)},p=se.compile=function(e,t){var n,i=[],o=[],r=E[e+" "];if(!r){for(n=(t=t||h(e)).length;n--;)(r=function e(t){for(var o,n,i,r=t.length,a=m.relative[t[0].type],s=a||m.relative[" "],l=a?1:0,u=ve(function(e){return e===o},s,!0),c=ve(function(e){return-1<O(o,e)},s,!0),d=[function(e,t,n){var i=!a&&(n||t!==P)||((o=t).nodeType?u:c)(e,t,n);return o=null,i}];l<r;l++)if(n=m.relative[t[l].type])d=[ve(be(d),n)];else{if((n=m.filter[t[l].type].apply(null,t[l].matches))[C]){for(i=++l;i<r&&!m.relative[t[i].type];i++);return Pe(1<l&&be(d),1<l&&Se(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(j,"$1"),n,l<i&&e(t.slice(l,i)),i<r&&e(t=t.slice(i)),i<r&&Se(t))}d.push(n)}return be(d)}(t[n]))[C]?i.push(r):o.push(r);(r=E(e,Ae(o,i))).selector=e}return r},T=se.select=function(e,t,n,i){var o,r,a,s,l,u="function"==typeof e&&e,c=!i&&h(e=u.selector||e);if(n=n||[],1===c.length){if(2<(r=c[0]=c[0].slice(0)).length&&"ID"===(a=r[0]).type&&9===t.nodeType&&M&&m.relative[r[1].type]){if(!(t=(m.find.ID(a.matches[0].replace(ie,d),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=Q.needsContext.test(e)?0:r.length;o--&&(a=r[o],!m.relative[s=a.type]);)if((l=m.find[s])&&(i=l(a.matches[0].replace(ie,d),ne.test(r[0].type)&&Te(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&Se(r)))return N.apply(n,i),n;break}}return(u||p(e,c))(i,t,!M,n,!t||ne.test(e)&&Te(t.parentNode)||t),n},f.sortStable=C.split("").sort(B).join("")===C,f.detectDuplicates=!!u,A(),f.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(y.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||de(V,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),se}(y);C.find=f,C.expr=f.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=f.uniqueSort,C.text=f.getText,C.isXMLDoc=f.isXML,C.contains=f.contains,C.escapeSelector=f.escape;function h(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&C(e).is(n))break;i.push(e)}return i}function A(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var x=C.expr.match.needsContext;function G(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var w=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function E(e,n,i){return b(n)?C.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?C.grep(e,function(e){return e===n!==i}):"string"!=typeof n?C.grep(e,function(e){return-1<o.call(n,e)!==i}):C.filter(n,e,i)}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<i;t++)if(C.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)C.find(e,o[t],n);return 1<i?C.uniqueSort(n):n},filter:function(e){return this.pushStack(E(this,e||[],!1))},not:function(e){return this.pushStack(E(this,e||[],!0))},is:function(e){return!!E(this,"string"==typeof e&&x.test(e)?C(e):e||[],!1).length}});var H,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||H,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:B.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:M,!0)),w.test(i[1])&&C.isPlainObject(t))for(i in t)b(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=M.getElementById(i[2]))&&(this[0]=o,this.length=1),this}).prototype=C.fn,H=C(M);var D=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,o=this.length,r=[],a="string"!=typeof e&&C(e);if(!x.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&C.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?C.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?o.call(C(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,"parentNode")},parentsUntil:function(e,t,n){return h(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return h(e,"nextSibling")},prevAll:function(e){return h(e,"previousSibling")},nextUntil:function(e,t,n){return h(e,"nextSibling",n)},prevUntil:function(e,t,n){return h(e,"previousSibling",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(G(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},function(i,o){C.fn[i]=function(e,t){var n=C.map(this,o,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=C.filter(t,n)),1<this.length&&(I[i]||C.uniqueSort(n),D.test(i)&&n.reverse()),this.pushStack(n)}});var N=/[^\x20\t\r\n\f]+/g;function k(e){return e}function O(e){throw e}function V(e,t,n,i){var o;try{e&&b(o=e.promise)?o.call(e).done(t).fail(n):e&&b(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},C.each(e.match(N)||[],function(e,t){n[t]=!0}),n):C.extend({},i);function o(){for(s=s||i.once,a=r=!0;u.length;c=-1)for(t=u.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&i.stopOnFalse&&(c=l.length,t=!1);i.memory||(t=!1),r=!1,s&&(l=t?[]:"")}var r,t,a,s,l=[],u=[],c=-1,d={add:function(){return l&&(t&&!r&&(c=l.length-1,u.push(t)),function n(e){C.each(e,function(e,t){b(t)?i.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==P(t)&&n(t)})}(arguments),t&&!r&&o()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;-1<(n=C.inArray(t,l,n));)l.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<C.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return s=u=[],l=t="",this},disabled:function(){return!l},lock:function(){return s=u=[],t||r||(l=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),r||o()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!a}};return d},C.extend({Deferred:function(e){var r=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],o="pending",a={state:function(){return o},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var o=arguments;return C.Deferred(function(i){C.each(r,function(e,t){var n=b(o[t[4]])&&o[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),o=null}).promise()},then:function(t,n,i){var l=0;function u(o,r,a,s){return function(){function e(){var e,t;if(!(o<l)){if((e=a.apply(n,i))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,b(t)?s?t.call(e,u(l,r,k,s),u(l,r,O,s)):(l++,t.call(e,u(l,r,k,s),u(l,r,O,s),u(l,r,k,r.notifyWith))):(a!==k&&(n=void 0,i=[e]),(s||r.resolveWith)(n,i))}}var n=this,i=arguments,t=s?e:function(){try{e()}catch(e){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(e,t.stackTrace),l<=o+1&&(a!==O&&(n=void 0,i=[e]),r.rejectWith(n,i))}};o?t():(C.Deferred.getStackHook&&(t.stackTrace=C.Deferred.getStackHook()),y.setTimeout(t))}}return C.Deferred(function(e){r[0][3].add(u(0,e,b(i)?i:k,e.notifyWith)),r[1][3].add(u(0,e,b(t)?t:k)),r[2][3].add(u(0,e,b(n)?n:O))}).promise()},promise:function(e){return null!=e?C.extend(e,a):a}},s={};return C.each(r,function(e,t){var n=t[2],i=t[5];a[t[1]]=n.add,i&&n.add(function(){o=i},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t){return function(e){o[t]=this,r[t]=1<arguments.length?s.call(arguments):e,--n||a.resolveWith(o,r)}}var n=arguments.length,i=n,o=Array(i),r=s.call(arguments),a=C.Deferred();if(n<=1&&(V(e,a.done(t(i)).resolve,a.reject,!n),"pending"===a.state()||b(r[i]&&r[i].then)))return a.then();for(;i--;)V(r[i],t(i),a.reject);return a.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){y.console&&y.console.warn&&e&&R.test(e.name)&&y.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){y.setTimeout(function(){throw e})};var F=C.Deferred();function X(){M.removeEventListener("DOMContentLoaded",X),y.removeEventListener("load",X),C.ready()}C.fn.ready=function(e){return F.then(e).catch(function(e){C.readyException(e)}),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0)!==e&&0<--C.readyWait||F.resolveWith(M,[C])}}),C.ready.then=F.then,"complete"===M.readyState||"loading"!==M.readyState&&!M.documentElement.doScroll?y.setTimeout(C.ready):(M.addEventListener("DOMContentLoaded",X),y.addEventListener("load",X));function W(e,t,n,i,o,r,a){var s=0,l=e.length,u=null==n;if("object"===P(n))for(s in o=!0,n)W(e,t,s,n[s],!0,r,a);else if(void 0!==i&&(o=!0,b(i)||(a=!0),u&&(t=a?(t.call(e,i),null):(u=t,function(e,t,n){return u.call(C(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return o?e:u?t.call(e):l?t(e[0],n):r}var _=/^-ms-/,j=/-([a-z])/g;function q(e,t){return t.toUpperCase()}function U(e){return e.replace(_,"ms-").replace(j,q)}function K(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function z(){this.expando=C.expando+z.uid++}z.uid=1,z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[U(t)]=n;else for(i in t)o[U(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in i?[t]:t.match(N)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!C.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var $=new z,Q=new z,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(e,t,n){var i,o;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:Y.test(o)?JSON.parse(o):o)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return Q.hasData(e)||$.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return $.access(e,t,n)},_removeData:function(e,t){$.remove(e,t)}}),C.fn.extend({data:function(n,e){var t,i,o,r=this[0],a=r&&r.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){Q.set(this,n)}):W(this,function(e){var t;return r&&void 0===e?void 0!==(t=Q.get(r,n))||void 0!==(t=J(r,n))?t:void 0:void this.each(function(){Q.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=Q.get(r),1===r.nodeType&&!$.get(r,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(i=a[t].name).indexOf("data-")&&(i=U(i.slice(5)),J(r,i,o[i]));$.set(r,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),C.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=$.get(e,t),n&&(!i||Array.isArray(n)?i=$.access(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,o=n.shift(),r=C._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,function(){C.dequeue(e,t)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return $.get(e,n)||$.access(e,n,{empty:C.Callbacks("once memory").add(function(){$.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?C.queue(this[0],t):void 0===n?this:this.each(function(){var e=C.queue(this,t,n);C._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&C.dequeue(this,t)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--o||r.resolveWith(a,[a])}var i,o=1,r=C.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(i=$.get(a[s],e+"queueHooks"))&&i.empty&&(o++,i.empty.add(n));return n(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ie=M.documentElement,oe=function(e){return C.contains(e.ownerDocument,e)},re={composed:!0};ie.getRootNode&&(oe=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===C.css(e,"display")};function se(e,t,n,i){var o,r,a=20,s=i?function(){return i.cur()}:function(){return C.css(e,t,"")},l=s(),u=n&&n[3]||(C.cssNumber[t]?"":"px"),c=e.nodeType&&(C.cssNumber[t]||"px"!==u&&+l)&&te.exec(C.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)C.style(e,t,c+u),(1-r)*(1-(r=s()/l||.5))<=0&&(a=0),c/=r;c*=2,C.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=o)),o}var le={};function ue(e,t){for(var n,i,o,r,a,s,l,u=[],c=0,d=e.length;c<d;c++)(i=e[c]).style&&(n=i.style.display,t?("none"===n&&(u[c]=$.get(i,"display")||null,u[c]||(i.style.display="")),""===i.style.display&&ae(i)&&(u[c]=(l=s=a=r=void 0,a=(o=i).ownerDocument,s=o.nodeName,(l=le[s])||(r=a.body.appendChild(a.createElement(s)),l=C.css(r,"display"),r.parentNode.removeChild(r),"none"===l&&(l="block"),le[s]=l)))):"none"!==n&&(u[c]="none",$.set(i,"display",n)));for(c=0;c<d;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}C.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?C(this).show():C(this).hide()})}});var ce,de,pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;ce=M.createDocumentFragment().appendChild(M.createElement("div")),(de=M.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),ce.appendChild(de),v.checkClone=ce.cloneNode(!0).cloneNode(!0).lastChild.checked,ce.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ce.cloneNode(!0).lastChild.defaultValue,ce.innerHTML="<option></option>",v.option=!!ce.lastChild;var Te={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&G(e,t)?C.merge([e],n):n}function Se(e,t){for(var n=0,i=e.length;n<i;n++)$.set(e[n],"globalEval",!t||$.get(t[n],"globalEval"))}Te.tbody=Te.tfoot=Te.colgroup=Te.caption=Te.thead,Te.th=Te.td,v.option||(Te.optgroup=Te.option=[1,"<select multiple='multiple'>","</select>"]);var ve=/<|&#?\w+;/;function be(e,t,n,i,o){for(var r,a,s,l,u,c,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===P(r))C.merge(p,r.nodeType?[r]:r);else if(ve.test(r)){for(a=a||d.appendChild(t.createElement("div")),s=(fe.exec(r)||["",""])[1].toLowerCase(),l=Te[s]||Te._default,a.innerHTML=l[1]+C.htmlPrefilter(r)+l[2],c=l[0];c--;)a=a.lastChild;C.merge(p,a.childNodes),(a=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",f=0;r=p[f++];)if(i&&-1<C.inArray(r,i))o&&o.push(r);else if(u=oe(r),a=ge(d.appendChild(r),"script"),u&&Se(a),n)for(c=0;r=a[c++];)he.test(r.type||"")&&n.push(r);return d}var me=/^key/,Pe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ae=/^([^.]*)(?:\.(.+)|)/;function ye(){return!0}function Me(){return!1}function Ce(e,t){return e===function(){try{return M.activeElement}catch(e){}}()==("focus"===t)}function xe(e,t,n,i,o,r){var a,s;if("object"===_typeof(t)){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)xe(e,s,n,i,t[s],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=Me;else if(!o)return e;return 1===r&&(a=o,(o=function(e){return C().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=C.guid++)),e.each(function(){C.event.add(this,t,o,i,n)})}function Ge(e,o,r){r?($.set(e,o,!1),C.event.add(e,o,{namespace:!1,handler:function(e){var t,n,i=$.get(this,o);if(1&e.isTrigger&&this[o]){if(i.length)(C.event.special[o]||{}).delegateType&&e.stopPropagation();else if(i=s.call(arguments),$.set(this,o,i),t=r(this,o),this[o](),i!==(n=$.get(this,o))||t?$.set(this,o,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else i.length&&($.set(this,o,{value:C.event.trigger(C.extend(i[0],C.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===$.get(e,o)&&C.event.add(e,o,ye)}C.event={global:{},add:function(t,e,n,i,o){var r,a,s,l,u,c,d,p,f,h,T,g=$.get(t);if(K(t))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&C.find.matchesSelector(ie,o),n.guid||(n.guid=C.guid++),(l=g.events)||(l=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(N)||[""]).length;u--;)f=T=(s=Ae.exec(e[u])||[])[1],h=(s[2]||"").split(".").sort(),f&&(d=C.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=C.event.special[f]||{},c=C.extend({type:f,origType:T,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&C.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,i,h,a)||t.addEventListener&&t.addEventListener(f,a)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),C.event.global[f]=!0)},remove:function(e,t,n,i,o){var r,a,s,l,u,c,d,p,f,h,T,g=$.hasData(e)&&$.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(N)||[""]).length;u--;)if(f=T=(s=Ae.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),f){for(d=C.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=p.length;r--;)c=p[r],!o&&T!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(r,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));a&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||C.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)C.event.remove(e,f+t[u],n,i,!0);C.isEmptyObject(l)&&$.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,a,s=new Array(arguments.length),l=C.event.fix(e),u=($.get(this,"events")||Object.create(null))[l.type]||[],c=C.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=C.event.handlers.call(this,l,u),t=0;(o=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((C.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,o,r,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(r=[],a={},n=0;n<l;n++)void 0===a[o=(i=t[n]).selector+" "]&&(a[o]=i.needsContext?-1<C(o,this).index(u):C.find(o,this,null,[u]).length),a[o]&&r.push(i);r.length&&s.push({elem:u,handlers:r})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(C.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&G(t,"input")&&Ge(t,"click",ye),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&G(t,"input")&&Ge(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&G(t,"input")&&$.get(t,"click")||G(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ye:Me,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Me,isPropagationStopped:Me,isImmediatePropagationStopped:Me,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ye,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ye,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ye,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&me.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Pe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},function(e,t){C.event.special[e]={setup:function(){return Ge(this,e,Ce),!1},trigger:function(){return Ge(this,e),!0},delegateType:t}}),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){C.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||C.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=o),t}}}),C.fn.extend({on:function(e,t,n,i){return xe(this,e,t,n,i)},one:function(e,t,n,i){return xe(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Me),this.each(function(){C.event.remove(this,e,n,t)});for(o in e)this.off(o,t,e[o]);return this}});var we=/<script|<style|<link/i,Ee=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Be(e,t){return G(e,"table")&&G(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function De(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ie(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Le(e,t){var n,i,o,r,a,s;if(1===t.nodeType){if($.hasData(e)&&(s=$.get(e).events))for(o in $.remove(t,"handle events"),s)for(n=0,i=s[o].length;n<i;n++)C.event.add(t,o,s[o][n]);Q.hasData(e)&&(r=Q.access(e),a=C.extend({},r),Q.set(t,a))}}function Ne(n,i,o,r){i=g(i);var e,t,a,s,l,u,c=0,d=n.length,p=d-1,f=i[0],h=b(f);if(h||1<d&&"string"==typeof f&&!v.checkClone&&Ee.test(f))return n.each(function(e){var t=n.eq(e);h&&(i[0]=f.call(this,e,t.html())),Ne(t,i,o,r)});if(d&&(t=(e=be(i,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(s=(a=C.map(ge(e,"script"),De)).length;c<d;c++)l=e,c!==p&&(l=C.clone(l,!0,!0),s&&C.merge(a,ge(l,"script"))),o.call(n[c],l,c);if(s)for(u=a[a.length-1].ownerDocument,C.map(a,Ie),c=0;c<s;c++)l=a[c],he.test(l.type||"")&&!$.access(l,"globalEval")&&C.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):m(l.textContent.replace(He,""),l,u))}return n}function ke(e,t,n){for(var i,o=t?C.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||C.cleanData(ge(i)),i.parentNode&&(n&&oe(i)&&Se(ge(i,"script")),i.parentNode.removeChild(i));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,a,s,l,u,c=e.cloneNode(!0),d=oe(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(a=ge(c),i=0,o=(r=ge(e)).length;i<o;i++)s=r[i],l=a[i],u=void 0,"input"===(u=l.nodeName.toLowerCase())&&pe.test(s.type)?l.checked=s.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=s.defaultValue);if(t)if(n)for(r=r||ge(e),a=a||ge(c),i=0,o=r.length;i<o;i++)Le(r[i],a[i]);else Le(e,c);return 0<(a=ge(c,"script")).length&&Se(a,!d&&ge(e,"script")),c},cleanData:function(e){for(var t,n,i,o=C.event.special,r=0;void 0!==(n=e[r]);r++)if(K(n)){if(t=n[$.expando]){if(t.events)for(i in t.events)o[i]?C.event.remove(n,i):C.removeEvent(n,i,t.handle);n[$.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),C.fn.extend({detach:function(e){return ke(this,e,!0)},remove:function(e){return ke(this,e)},text:function(e){return W(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ne(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Be(this,e).appendChild(e)})},prepend:function(){return Ne(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Be(this,e)).insertBefore(e,t.firstChild)})},before:function(){return Ne(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ne(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return W(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!we.test(e)&&!Te[(fe.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ne(this,arguments,function(e){var t=this.parentNode;C.inArray(this,n)<0&&(C.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){C.fn[e]=function(e){for(var t,n=[],i=C(e),o=i.length-1,r=0;r<=o;r++)t=r===o?this:this.clone(!0),C(i[r])[a](t),l.apply(n,t.get());return this.pushStack(n)}});function Oe(e,t,n){var i,o,r={};for(o in t)r[o]=e.style[o],e.style[o]=t[o];for(o in i=n.call(e),t)e.style[o]=r[o];return i}var Ve,Re,Fe,Xe,We,_e,je,qe,Ue=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ke=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=y),t.getComputedStyle(e)},ze=new RegExp(ne.join("|"),"i");function $e(){var e;qe&&(je.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",qe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(je).appendChild(qe),e=y.getComputedStyle(qe),Ve="1%"!==e.top,_e=12===Qe(e.marginLeft),qe.style.right="60%",Xe=36===Qe(e.right),Re=36===Qe(e.width),qe.style.position="absolute",Fe=12===Qe(qe.offsetWidth/3),ie.removeChild(je),qe=null)}function Qe(e){return Math.round(parseFloat(e))}function Ye(e,t,n){var i,o,r,a,s=e.style;return(n=n||Ke(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=C.style(e,t)),!v.pixelBoxStyles()&&Ue.test(a)&&ze.test(t)&&(i=s.width,o=s.minWidth,r=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=o,s.maxWidth=r)),void 0!==a?a+"":a}function Ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}je=M.createElement("div"),(qe=M.createElement("div")).style&&(qe.style.backgroundClip="content-box",qe.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===qe.style.backgroundClip,C.extend(v,{boxSizingReliable:function(){return $e(),Re},pixelBoxStyles:function(){return $e(),Xe},pixelPosition:function(){return $e(),Ve},reliableMarginLeft:function(){return $e(),_e},scrollboxSize:function(){return $e(),Fe},reliableTrDimensions:function(){var e,t,n,i;return null==We&&(e=M.createElement("table"),t=M.createElement("tr"),n=M.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",ie.appendChild(e).appendChild(t).appendChild(n),i=y.getComputedStyle(t),We=3<parseInt(i.height),ie.removeChild(e)),We}}));var Je=["Webkit","Moz","ms"],et=M.createElement("div").style,tt={};function nt(e){var t=C.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in et)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,ot=/^--/,rt={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function st(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function lt(e,t,n,i,o,r){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=C.css(e,n+ne[a],!0,o)),i?("content"===n&&(l-=C.css(e,"padding"+ne[a],!0,o)),"margin"!==n&&(l-=C.css(e,"border"+ne[a]+"Width",!0,o))):(l+=C.css(e,"padding"+ne[a],!0,o),"padding"!==n?l+=C.css(e,"border"+ne[a]+"Width",!0,o):s+=C.css(e,"border"+ne[a]+"Width",!0,o));return!i&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-s-.5))||0),l}function ut(e,t,n){var i=Ke(e),o=(!v.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,i),r=o,a=Ye(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&o||!v.reliableTrDimensions()&&G(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===C.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===C.css(e,"boxSizing",!1,i),(r=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+lt(e,t,n||(o?"border":"content"),r,i,a)+"px"}function ct(e,t,n,i,o){return new ct.prototype.init(e,t,n,i,o)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ye(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,a,s=U(t),l=ot.test(t),u=e.style;if(l||(t=nt(s)),a=C.cssHooks[t]||C.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,i))?o:u[t];"string"===(r=_typeof(n))&&(o=te.exec(n))&&o[1]&&(n=se(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(C.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var o,r,a,s=U(t);return ot.test(t)||(t=nt(s)),(a=C.cssHooks[t]||C.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=Ye(e,t,i)),"normal"===o&&t in at&&(o=at[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),C.each(["height","width"],function(e,l){C.cssHooks[l]={get:function(e,t,n){if(t)return!it.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ut(e,l,n):Oe(e,rt,function(){return ut(e,l,n)})},set:function(e,t,n){var i,o=Ke(e),r=!v.scrollboxSize()&&"absolute"===o.position,a=(r||n)&&"border-box"===C.css(e,"boxSizing",!1,o),s=n?lt(e,l,n,a,o):0;return a&&r&&(s-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(o[l])-lt(e,l,"border",!1,o)-.5)),s&&(i=te.exec(t))&&"px"!==(i[3]||"px")&&(e.style[l]=t,t=C.css(e,l)),st(0,t,s)}}}),C.cssHooks.marginLeft=Ze(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ye(e,"marginLeft"))||e.getBoundingClientRect().left-Oe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(o,r){C.cssHooks[o+r]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[o+ne[t]+r]=i[t]||i[t-2]||i[0];return n}},"margin"!==o&&(C.cssHooks[o+r].set=st)}),C.fn.extend({css:function(e,t){return W(this,function(e,t,n){var i,o,r={},a=0;if(Array.isArray(t)){for(i=Ke(e),o=t.length;a<o;a++)r[t[a]]=C.css(e,t[a],!1,i);return r}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,1<arguments.length)}}),(C.Tween=ct).prototype={constructor:ct,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(C.cssNumber[n]?"":"px")},cur:function(){var e=ct.propHooks[this.prop];return e&&e.get?e.get(this):ct.propHooks._default.get(this)},run:function(e){var t,n=ct.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ct.propHooks._default.set(this),this}},ct.prototype.init.prototype=ct.prototype,ct.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},ct.propHooks.scrollTop=ct.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=ct.prototype.init,C.fx.step={};var dt,pt,ft,ht,Tt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function St(){pt&&(!1===M.hidden&&y.requestAnimationFrame?y.requestAnimationFrame(St):y.setTimeout(St,C.fx.interval),C.fx.tick())}function vt(){return y.setTimeout(function(){dt=void 0}),dt=Date.now()}function bt(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=ne[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function mt(e,t,n){for(var i,o=(Pt.tweeners[t]||[]).concat(Pt.tweeners["*"]),r=0,a=o.length;r<a;r++)if(i=o[r].call(n,t,e))return i}function Pt(r,e,t){var n,a,i=0,o=Pt.prefilters.length,s=C.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var e=dt||vt(),t=Math.max(0,u.startTime+u.duration-e),n=1-(t/u.duration||0),i=0,o=u.tweens.length;i<o;i++)u.tweens[i].run(n);return s.notifyWith(r,[u,n,t]),n<1&&o?t:(o||s.notifyWith(r,[u,1,0]),s.resolveWith(r,[u]),!1)},u=s.promise({elem:r,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||vt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=C.Tween(r,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var t=0,n=e?u.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)u.tweens[t].run(1);return e?(s.notifyWith(r,[u,1,0]),s.resolveWith(r,[u,e])):s.rejectWith(r,[u,e]),this}}),c=u.props;for(!function(e,t){var n,i,o,r,a;for(n in e)if(o=t[i=U(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(a=C.cssHooks[i])&&"expand"in a)for(n in r=a.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(c,u.opts.specialEasing);i<o;i++)if(n=Pt.prefilters[i].call(u,r,c,u.opts))return b(n.stop)&&(C._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return C.map(c,mt,u),b(u.opts.start)&&u.opts.start.call(r,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),C.fx.timer(C.extend(l,{elem:r,anim:u,queue:u.opts.queue})),u}C.Animation=C.extend(Pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,o=(e=b(e)?(t=e,["*"]):e.match(N)).length;i<o;i++)n=e[i],Pt.tweeners[n]=Pt.tweeners[n]||[],Pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,a,s,l,u,c,d="width"in t||"height"in t,p=this,f={},h=e.style,T=e.nodeType&&ae(e),g=$.get(e,"fxshow");for(i in n.queue||(null==(a=C._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,C.queue(e,"fx").length||a.empty.fire()})})),t)if(o=t[i],Tt.test(o)){if(delete t[i],r=r||"toggle"===o,o===(T?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;T=!0}f[i]=g&&g[i]||C.style(e,i)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(f))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=g&&g.display)&&(u=$.get(e,"display")),"none"===(c=C.css(e,"display"))&&(u?c=u:(ue([e],!0),u=e.style.display||u,c=C.css(e,"display"),ue([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===C.css(e,"float")&&(l||(p.done(function(){h.display=u}),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(T=g.hidden):g=$.access(e,"fxshow",{display:u}),r&&(g.hidden=!T),T&&ue([e],!0),p.done(function(){for(i in T||ue([e]),$.remove(e,"fxshow"),f)C.style(e,i,f[i])})),l=mt(T?g[i]:0,i,p),i in g||(g[i]=l.start,T&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?Pt.prefilters.unshift(e):Pt.prefilters.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"===_typeof(e)?C.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){b(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function o(){var e=Pt(this,C.extend({},t),a);(r||$.get(this,"finish"))&&e.stop(!0)}var r=C.isEmptyObject(t),a=C.speed(e,n,i);return o.finish=o,r||!1===a.queue?this.each(o):this.queue(a.queue,o)},stop:function(o,e,r){function a(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof o&&(r=e,e=o,o=void 0),e&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",n=C.timers,i=$.get(this);if(t)i[t]&&i[t].stop&&a(i[t]);else for(t in i)i[t]&&i[t].stop&&gt.test(t)&&a(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=o&&n[t].queue!==o||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||C.dequeue(this,o)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=$.get(this),n=t[a+"queue"],i=t[a+"queueHooks"],o=C.timers,r=n?n.length:0;for(t.finish=!0,C.queue(this,a,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===a&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),C.each(["toggle","show","hide"],function(e,i){var o=C.fn[i];C.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(bt(i,!0),e,t,n)}}),C.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){C.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),dt=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){pt||(pt=!0,St())},C.fx.stop=function(){pt=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(i,e){return i=C.fx&&C.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=y.setTimeout(e,i);t.stop=function(){y.clearTimeout(n)}})},ft=M.createElement("input"),ht=M.createElement("select").appendChild(M.createElement("option")),ft.type="checkbox",v.checkOn=""!==ft.value,v.optSelected=ht.selected,(ft=M.createElement("input")).value="t",ft.type="radio",v.radioValue="t"===ft.value;var At,yt=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return W(this,C.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?C.prop(e,t,n):(1===r&&C.isXMLDoc(e)||(o=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?At:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(o&&"get"in o&&null!==(i=o.get(e,t)))&&null==(i=C.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&G(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(N);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),At={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var a=yt[t]||C.find.attr;yt[t]=function(e,t,n){var i,o,r=t.toLowerCase();return n||(o=yt[r],yt[r]=i,i=null!=a(e,t,n)?r:null,yt[r]=o),i}});var Mt=/^(?:input|select|textarea|button)$/i,Ct=/^(?:a|area)$/i;function xt(e){return(e.match(N)||[]).join(" ")}function Gt(e){return e.getAttribute&&e.getAttribute("class")||""}function wt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(N)||[]}C.fn.extend({prop:function(e,t){return W(this,C.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&C.isXMLDoc(e)||(t=C.propFix[t]||t,o=C.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):Mt.test(e.nodeName)||Ct.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(t){var e,n,i,o,r,a,s,l=0;if(b(t))return this.each(function(e){C(this).addClass(t.call(this,e,Gt(this)))});if((e=wt(t)).length)for(;n=this[l++];)if(o=Gt(n),i=1===n.nodeType&&" "+xt(o)+" "){for(a=0;r=e[a++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(s=xt(i))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,i,o,r,a,s,l=0;if(b(t))return this.each(function(e){C(this).removeClass(t.call(this,e,Gt(this)))});if(!arguments.length)return this.attr("class","");if((e=wt(t)).length)for(;n=this[l++];)if(o=Gt(n),i=1===n.nodeType&&" "+xt(o)+" "){for(a=0;r=e[a++];)for(;-1<i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");o!==(s=xt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(o,t){var r=_typeof(o),a="string"===r||Array.isArray(o);return"boolean"==typeof t&&a?t?this.addClass(o):this.removeClass(o):b(o)?this.each(function(e){C(this).toggleClass(o.call(this,e,Gt(this),t),t)}):this.each(function(){var e,t,n,i;if(a)for(t=0,n=C(this),i=wt(o);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==o&&"boolean"!==r||((e=Gt(this))&&$.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==o&&$.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,i=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+xt(Gt(t))+" ").indexOf(i))return!0;return!1}});var Et=/\r/g;C.fn.extend({val:function(n){var i,e,o,t=this[0];return arguments.length?(o=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=o?n.call(this,e,C(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=C.map(t,function(e){return null==e?"":e+""})),(i=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=C.valHooks[t.type]||C.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Et,""):null==e?"":e:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:xt(C.text(e))}},select:{get:function(e){for(var t,n,i=e.options,o=e.selectedIndex,r="select-one"===e.type,a=r?null:[],s=r?o+1:i.length,l=o<0?s:r?o:0;l<s;l++)if(((n=i[l]).selected||l===o)&&!n.disabled&&(!n.parentNode.disabled||!G(n.parentNode,"optgroup"))){if(t=C(n).val(),r)return t;a.push(t)}return a},set:function(e,t){for(var n,i,o=e.options,r=C.makeArray(t),a=o.length;a--;)((i=o[a]).selected=-1<C.inArray(C.valHooks.option.get(i),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<C.inArray(C(e).val(),t)}},v.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in y;function Ht(e){e.stopPropagation()}var Bt=/^(?:focusinfocus|focusoutblur)$/;C.extend(C.event,{trigger:function(e,t,n,i){var o,r,a,s,l,u,c,d=[n||M],p=S.call(e,"type")?e.type:e,f=S.call(e,"namespace")?e.namespace.split("."):[],h=c=r=n=n||M;if(3!==n.nodeType&&8!==n.nodeType&&!Bt.test(p+C.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),s=p.indexOf(":")<0&&"on"+p,(e=e[C.expando]?e:new C.Event(p,"object"===_typeof(e)&&e)).isTrigger=i?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),u=C.event.special[p]||{},i||!u.trigger||!1!==u.trigger.apply(n,t))){if(!i&&!u.noBubble&&!T(n)){for(a=u.delegateType||p,Bt.test(a+p)||(h=h.parentNode);h;h=h.parentNode)d.push(h),r=h;r===(n.ownerDocument||M)&&d.push(r.defaultView||r.parentWindow||y)}for(o=0;(h=d[o++])&&!e.isPropagationStopped();)c=h,e.type=1<o?a:u.bindType||p,(l=($.get(h,"events")||Object.create(null))[e.type]&&$.get(h,"handle"))&&l.apply(h,t),(l=s&&h[s])&&l.apply&&K(h)&&(e.result=l.apply(h,t),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),t)||!K(n)||s&&b(n[p])&&!T(n)&&((r=n[s])&&(n[s]=null),C.event.triggered=p,e.isPropagationStopped()&&c.addEventListener(p,Ht),n[p](),e.isPropagationStopped()&&c.removeEventListener(p,Ht),C.event.triggered=void 0,r&&(n[s]=r)),e.result}},simulate:function(e,t,n){var i=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(i,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),v.focusin||C.each({focus:"focusin",blur:"focusout"},function(n,i){function o(e){C.event.simulate(i,e.target,C.event.fix(e))}C.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=$.access(e,i);t||e.addEventListener(n,o,!0),$.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=$.access(e,i)-1;t?$.access(e,i,t):(e.removeEventListener(n,o,!0),$.remove(e,i))}}});var Dt=y.location,It={guid:Date.now()},Lt=/\?/;C.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new y.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+e),t};var Nt=/\[\]$/,kt=/\r?\n/g,Ot=/^(?:submit|button|image|reset|file)$/i,Vt=/^(?:input|select|textarea|keygen)/i;C.param=function(e,t){function n(e,t){var n=b(t)?t():t;o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var i,o=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){n(this.name,this.value)});else for(i in e)!function n(i,e,o,r){var t;if(Array.isArray(e))C.each(e,function(e,t){o||Nt.test(i)?r(i,t):n(i+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,o,r)});else if(o||"object"!==P(e))r(i,e);else for(t in e)n(i+"["+t+"]",e[t],o,r)}(i,e[i],t,n);return o.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Vt.test(this.nodeName)&&!Ot.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}});var Rt=/%20/g,Ft=/#.*$/,Xt=/([?&])_=[^&]*/,Wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,_t=/^(?:GET|HEAD)$/,jt=/^\/\//,qt={},Ut={},Kt="*/".concat("*"),zt=M.createElement("a");function $t(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,o=e.toLowerCase().match(N)||[];if(b(t))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function Qt(t,o,r,a){var s={},l=t===Ut;function u(e){var i;return s[e]=!0,C.each(t[e]||[],function(e,t){var n=t(o,r,a);return"string"!=typeof n||l||s[n]?l?!(i=n):void 0:(o.dataTypes.unshift(n),u(n),!1)}),i}return u(o.dataTypes[0])||!s["*"]&&u("*")}function Yt(e,t){var n,i,o=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i=i||{})[n]=t[n]);return i&&C.extend(!0,e,i),e}zt.href=Dt.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Yt(Yt(e,C.ajaxSettings),t):Yt(C.ajaxSettings,e)},ajaxPrefilter:$t(qt),ajaxTransport:$t(Ut),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0),t=t||{};var c,d,p,n,f,i,h,T,o,r,g=C.ajaxSetup({},t),S=g.context||g,v=g.context&&(S.nodeType||S.jquery)?C(S):C.event,b=C.Deferred(),m=C.Callbacks("once memory"),P=g.statusCode||{},a={},s={},l="canceled",A={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n)for(n={};t=Wt.exec(p);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)A.always(e[A.status]);else for(t in e)P[t]=[P[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),u(0,t),this}};if(b.promise(A),g.url=((e||g.url||Dt.href)+"").replace(jt,Dt.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(N)||[""],null==g.crossDomain){i=M.createElement("a");try{i.href=g.url,i.href=i.href,g.crossDomain=zt.protocol+"//"+zt.host!=i.protocol+"//"+i.host}catch(e){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=C.param(g.data,g.traditional)),Qt(qt,g,t,A),h)return A;for(o in(T=C.event&&g.global)&&0==C.active++&&C.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!_t.test(g.type),d=g.url.replace(Ft,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Rt,"+")):(r=g.url.slice(d.length),g.data&&(g.processData||"string"==typeof g.data)&&(d+=(Lt.test(d)?"&":"?")+g.data,delete g.data),!1===g.cache&&(d=d.replace(Xt,"$1"),r=(Lt.test(d)?"&":"?")+"_="+It.guid+++r),g.url=d+r),g.ifModified&&(C.lastModified[d]&&A.setRequestHeader("If-Modified-Since",C.lastModified[d]),C.etag[d]&&A.setRequestHeader("If-None-Match",C.etag[d])),(g.data&&g.hasContent&&!1!==g.contentType||t.contentType)&&A.setRequestHeader("Content-Type",g.contentType),A.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Kt+"; q=0.01":""):g.accepts["*"]),g.headers)A.setRequestHeader(o,g.headers[o]);if(g.beforeSend&&(!1===g.beforeSend.call(S,A,g)||h))return A.abort();if(l="abort",m.add(g.complete),A.done(g.success),A.fail(g.error),c=Qt(Ut,g,t,A)){if(A.readyState=1,T&&v.trigger("ajaxSend",[A,g]),h)return A;g.async&&0<g.timeout&&(f=y.setTimeout(function(){A.abort("timeout")},g.timeout));try{h=!1,c.send(a,u)}catch(e){if(h)throw e;u(-1,e)}}else u(-1,"No Transport");function u(e,t,n,i){var o,r,a,s,l,u=t;h||(h=!0,f&&y.clearTimeout(f),c=void 0,p=i||"",A.readyState=0<e?4:0,o=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var i,o,r,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in s)if(s[o]&&s[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}a=a||o}r=r||a}if(r)return r!==l[0]&&l.unshift(r),n[r]}(g,A,n)),!o&&-1<C.inArray("script",g.dataTypes)&&(g.converters["text script"]=function(){}),s=function(e,t,n,i){var o,r,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(r=c.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=u[l+" "+r]||u["* "+r]))for(o in u)if((s=o.split(" "))[1]===r&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[o]:!0!==u[o]&&(r=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(g,s,A,o),o?(g.ifModified&&((l=A.getResponseHeader("Last-Modified"))&&(C.lastModified[d]=l),(l=A.getResponseHeader("etag"))&&(C.etag[d]=l)),204===e||"HEAD"===g.type?u="nocontent":304===e?u="notmodified":(u=s.state,r=s.data,o=!(a=s.error))):(a=u,!e&&u||(u="error",e<0&&(e=0))),A.status=e,A.statusText=(t||u)+"",o?b.resolveWith(S,[r,u,A]):b.rejectWith(S,[A,u,a]),A.statusCode(P),P=void 0,T&&v.trigger(o?"ajaxSuccess":"ajaxError",[A,g,o?r:a]),m.fireWith(S,[A,u]),T&&(v.trigger("ajaxComplete",[A,g]),--C.active||C.event.trigger("ajaxStop")))}return A},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,o){C[o]=function(e,t,n,i){return b(t)&&(i=i||n,n=t,t=void 0),C.ajax(C.extend({url:e,type:o,dataType:i,data:t,success:n},C.isPlainObject(e)&&e))}}),C.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){C(this).wrapInner(n.call(this,e))}):this.each(function(){var e=C(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){C(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new y.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},Jt=C.ajaxSettings.xhr();v.cors=!!Jt&&"withCredentials"in Jt,v.ajax=Jt=!!Jt,C.ajaxTransport(function(o){var r,a;if(v.cors||Jt&&!o.crossDomain)return{send:function(e,t){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=a=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Zt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),a=i.onerror=i.ontimeout=r("error"),void 0!==i.onabort?i.onabort=a:i.onreadystatechange=function(){4===i.readyState&&y.setTimeout(function(){r&&a()})},r=r("abort");try{i.send(o.hasContent&&o.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),C.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(n){var i,o;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=C("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(e){i.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),M.head.appendChild(i[0])},abort:function(){o&&o()}}});var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||C.expando+"_"+It.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,n){var i,o,r,a=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(nn,"$1"+i):!1!==e.jsonp&&(e.url+=(Lt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return r||C.error(i+" was not called"),r[0]},e.dataTypes[0]="json",o=y[i],y[i]=function(){r=arguments},n.always(function(){void 0===o?C(y).removeProp(i):y[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,tn.push(i)),r&&b(o)&&o(r[0]),r=o=void 0}),"script"}),v.createHTMLDocument=((en=M.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=M.implementation.createHTMLDocument("")).createElement("base")).href=M.location.href,t.head.appendChild(i)):t=M),r=!n&&[],(o=w.exec(e))?[t.createElement(o[1])]:(o=be([e],t,r),r&&r.length&&C(r).remove(),C.merge([],o.childNodes)));var i,o,r},C.fn.load=function(e,t,n){var i,o,r,a=this,s=e.indexOf(" ");return-1<s&&(i=xt(e.slice(s)),e=e.slice(0,s)),b(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(o="POST"),0<a.length&&C.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,a.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},C.expr.pseudos.animated=function(t){return C.grep(C.timers,function(e){return t===e.elem}).length},C.offset={setOffset:function(e,t,n){var i,o,r,a,s,l,u=C.css(e,"position"),c=C(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),r=C.css(e,"top"),l=C.css(e,"left"),o=("absolute"===u||"fixed"===u)&&-1<(r+l).indexOf("auto")?(a=(i=c.position()).top,i.left):(a=parseFloat(r)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,n,C.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+o),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),c.css(d))}},C.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){C.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===C.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),o.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-C.css(i,"marginTop",!0),left:t.left-o.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||ie})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var r="pageYOffset"===o;C.fn[t]=function(e){return W(this,function(e,t,n){var i;return T(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n?i?i[o]:e[t]:void(i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):e[t]=n)},t,e,arguments.length)}}),C.each(["top","left"],function(e,n){C.cssHooks[n]=Ze(v.pixelPosition,function(e,t){if(t)return t=Ye(e,n),Ue.test(t)?C(e).position()[n]+"px":t})}),C.each({Height:"height",Width:"width"},function(a,s){C.each({padding:"inner"+a,content:s,"":"outer"+a},function(i,r){C.fn[r]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),o=i||(!0===e||!0===t?"margin":"border");return W(this,function(e,t,n){var i;return T(e)?0===r.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+a],i["scroll"+a],e.body["offset"+a],i["offset"+a],i["client"+a])):void 0===n?C.css(e,t,o):C.style(e,t,n,o)},s,n?e:void 0,n)}})}),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){C.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var on=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;C.proxy=function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return i=s.call(arguments,2),(o=function(){return e.apply(t||this,i.concat(s.call(arguments)))}).guid=e.guid=e.guid||C.guid++,o},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=G,C.isFunction=b,C.isWindow=T,C.camelCase=U,C.type=P,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(on,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return C});var rn=y.jQuery,an=y.$;return C.noConflict=function(e){return y.$===C&&(y.$=an),e&&y.jQuery===C&&(y.jQuery=rn),C},void 0===e&&(y.jQuery=y.$=C),C}),function(q){var U={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};q.fn.bxSlider=function(t){if(0===this.length)return this;if(1<this.length)return this.each(function(){q(this).bxSlider(t)}),this;var d={},p=this,o=q(window).width(),r=q(window).height();if(!q(p).data("bxSlider")){var n=function(){q(p).data("bxSlider")||(d.settings=q.extend({},U,t),d.settings.slideWidth=parseInt(d.settings.slideWidth),d.children=p.children(d.settings.slideSelector),d.children.length<d.settings.minSlides&&(d.settings.minSlides=d.children.length),d.children.length<d.settings.maxSlides&&(d.settings.maxSlides=d.children.length),d.settings.randomStart&&(d.settings.startSlide=Math.floor(Math.random()*d.children.length)),d.active={index:d.settings.startSlide},d.carousel=1<d.settings.minSlides||1<d.settings.maxSlides,d.carousel&&(d.settings.preloadImages="all"),d.minThreshold=d.settings.minSlides*d.settings.slideWidth+(d.settings.minSlides-1)*d.settings.slideMargin,d.maxThreshold=d.settings.maxSlides*d.settings.slideWidth+(d.settings.maxSlides-1)*d.settings.slideMargin,d.working=!1,d.controls={},d.interval=null,d.animProp="vertical"===d.settings.mode?"top":"left",d.usingCSS=d.settings.useCSS&&"fade"!==d.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return d.cssPrefix=t[n].replace("Perspective","").toLowerCase(),d.animProp="-"+d.cssPrefix+"-transform",!0;return!1}(),"vertical"===d.settings.mode&&(d.settings.maxSlides=d.settings.minSlides),p.data("origStyle",p.attr("style")),p.children(d.settings.slideSelector).each(function(){q(this).data("origStyle",q(this).attr("style"))}),e())},e=function(){var e=d.children.eq(d.settings.startSlide);p.wrap('<div class="'+d.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),d.viewport=p.parent(),d.settings.ariaLive&&!d.settings.ticker&&d.viewport.attr("aria-live","polite"),d.loader=q('<div class="bx-loading" />'),d.viewport.prepend(d.loader),p.css({width:"horizontal"===d.settings.mode?1e3*d.children.length+215+"%":"auto",position:"relative"}),d.usingCSS&&d.settings.easing?p.css("-"+d.cssPrefix+"-transition-timing-function",d.settings.easing):d.settings.easing||(d.settings.easing="swing"),d.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),d.viewport.parent().css({maxWidth:l()}),d.children.css({float:"horizontal"===d.settings.mode?"left":"none",listStyle:"none",position:"relative"}),d.children.css("width",u()),"horizontal"===d.settings.mode&&0<d.settings.slideMargin&&d.children.css("marginRight",d.settings.slideMargin),"vertical"===d.settings.mode&&0<d.settings.slideMargin&&d.children.css("marginBottom",d.settings.slideMargin),"fade"===d.settings.mode&&(d.children.css({position:"absolute",zIndex:0,display:"none"}),d.children.eq(d.settings.startSlide).css({zIndex:d.settings.slideZIndex,display:"block"})),d.controls.el=q('<div class="bx-controls" />'),d.settings.captions&&A(),d.active.last=d.settings.startSlide===h()-1,d.settings.video&&p.fitVids(),"none"===d.settings.preloadImages?e=null:"all"!==d.settings.preloadImages&&!d.settings.ticker||(e=d.children),d.settings.ticker?d.settings.pager=!1:(d.settings.controls&&m(),d.settings.auto&&d.settings.autoControls&&P(),d.settings.pager&&b(),(d.settings.controls||d.settings.autoControls||d.settings.pager)&&d.viewport.after(d.controls.el)),null===e?s():a(e,s)},a=function(e,t){var n=e.find('img:not([src=""]), iframe').length,i=0;0!==n?e.find('img:not([src=""]), iframe').each(function(){q(this).one("load error",function(){++i===n&&t()}).each(function(){!this.complete&&""!=this.src||q(this).trigger("load")})}):t()},s=function(){var e,t,n;d.settings.infiniteLoop&&"fade"!==d.settings.mode&&!d.settings.ticker&&(e="vertical"===d.settings.mode?d.settings.minSlides:d.settings.maxSlides,t=d.children.slice(0,e).clone(!0).addClass("bx-clone"),n=d.children.slice(-e).clone(!0).addClass("bx-clone"),d.settings.ariaHidden&&(t.attr("aria-hidden",!0),n.attr("aria-hidden",!0)),p.append(t).prepend(n)),d.loader.remove(),g(),"vertical"===d.settings.mode&&(d.settings.adaptiveHeight=!0),d.viewport.height(f()),p.redrawSlider(),d.settings.onSliderLoad.call(p,d.active.index),d.initialized=!0,d.settings.responsive&&q(window).on("resize",_),d.settings.auto&&d.settings.autoStart&&(1<h()||d.settings.autoSlideForOnePage)&&L(),d.settings.ticker&&N(),d.settings.pager&&w(d.settings.startSlide),d.settings.controls&&B(),d.settings.touchEnabled&&!d.settings.ticker&&V(),d.settings.keyboardEnabled&&!d.settings.ticker&&q(document).keydown(O)},f=function(){var t=0,e=q();if("vertical"===d.settings.mode||d.settings.adaptiveHeight)if(d.carousel){var n=1===d.settings.moveSlides?d.active.index:d.active.index*T(),e=d.children.eq(n);for(i=1;i<=d.settings.maxSlides-1;i++)e=n+i>=d.children.length?e.add(d.children.eq(i-1)):e.add(d.children.eq(n+i))}else e=d.children.eq(d.active.index);else e=d.children;return"vertical"===d.settings.mode?(e.each(function(e){t+=q(this).outerHeight()}),0<d.settings.slideMargin&&(t+=d.settings.slideMargin*(d.settings.minSlides-1))):t=Math.max.apply(Math,e.map(function(){return q(this).outerHeight(!1)}).get()),"border-box"===d.viewport.css("box-sizing")?t+=parseFloat(d.viewport.css("padding-top"))+parseFloat(d.viewport.css("padding-bottom"))+parseFloat(d.viewport.css("border-top-width"))+parseFloat(d.viewport.css("border-bottom-width")):"padding-box"===d.viewport.css("box-sizing")&&(t+=parseFloat(d.viewport.css("padding-top"))+parseFloat(d.viewport.css("padding-bottom"))),t},l=function(){var e="100%";return 0<d.settings.slideWidth&&(e="horizontal"===d.settings.mode?d.settings.maxSlides*d.settings.slideWidth+(d.settings.maxSlides-1)*d.settings.slideMargin:d.settings.slideWidth),e},u=function(){var e=d.settings.slideWidth,t=d.viewport.width();if(0===d.settings.slideWidth||d.settings.slideWidth>t&&!d.carousel||"vertical"===d.settings.mode)e=t;else if(1<d.settings.maxSlides&&"horizontal"===d.settings.mode){if(t>d.maxThreshold)return e;t<d.minThreshold?e=(t-d.settings.slideMargin*(d.settings.minSlides-1))/d.settings.minSlides:d.settings.shrinkItems&&(e=Math.floor((t+d.settings.slideMargin)/Math.ceil((t+d.settings.slideMargin)/(e+d.settings.slideMargin))-d.settings.slideMargin))}return e},c=function(){var e,t=1;return"horizontal"===d.settings.mode&&0<d.settings.slideWidth?t=d.viewport.width()<d.minThreshold?d.settings.minSlides:d.viewport.width()>d.maxThreshold?d.settings.maxSlides:(e=d.children.first().width()+d.settings.slideMargin,Math.floor((d.viewport.width()+d.settings.slideMargin)/e)||1):"vertical"===d.settings.mode&&(t=d.settings.minSlides),t},h=function(){var e=0,t=0,n=0;if(0<d.settings.moveSlides){if(!d.settings.infiniteLoop){for(;t<d.children.length;)++e,t=n+c(),n+=d.settings.moveSlides<=c()?d.settings.moveSlides:c();return n}e=Math.ceil(d.children.length/T())}else e=Math.ceil(d.children.length/c());return e},T=function(){return 0<d.settings.moveSlides&&d.settings.moveSlides<=c()?d.settings.moveSlides:c()},g=function(){var e,t,n;d.children.length>d.settings.maxSlides&&d.active.last&&!d.settings.infiniteLoop?"horizontal"===d.settings.mode?(e=(t=d.children.last()).position(),S(-(e.left-(d.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===d.settings.mode&&(n=d.children.length-d.settings.minSlides,e=d.children.eq(n).position(),S(-e.top,"reset",0)):(e=d.children.eq(d.active.index*T()).position(),d.active.index===h()-1&&(d.active.last=!0),void 0!==e&&("horizontal"===d.settings.mode?S(-e.left,"reset",0):"vertical"===d.settings.mode&&S(-e.top,"reset",0)))},S=function t(e,n,i,o){var r,a;d.usingCSS?(a="vertical"===d.settings.mode?"translate3d(0, "+e+"px, 0)":"translate3d("+e+"px, 0, 0)",p.css("-"+d.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(p.css(d.animProp,a),0!==i?p.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){q(e.target).is(p)&&(p.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),E())}):E()):"reset"===n?p.css(d.animProp,a):"ticker"===n&&(p.css("-"+d.cssPrefix+"-transition-timing-function","linear"),p.css(d.animProp,a),0!==i?p.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){q(e.target).is(p)&&(p.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),t(o.resetValue,"reset",0),k())}):(t(o.resetValue,"reset",0),k()))):((r={})[d.animProp]=e,"slide"===n?p.animate(r,i,d.settings.easing,function(){E()}):"reset"===n?p.css(d.animProp,e):"ticker"===n&&p.animate(r,i,"linear",function(){t(o.resetValue,"reset",0),k()}))},v=function(){for(var e="",t="",n=h(),i=0;i<n;i++)t="",d.settings.buildPager&&q.isFunction(d.settings.buildPager)||d.settings.pagerCustom?(t=d.settings.buildPager(i),d.pagerEl.addClass("bx-custom-pager")):(t=i+1,d.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+i+'" class="bx-pager-link">'+t+"</a></div>";d.pagerEl.html(e)},b=function(){d.settings.pagerCustom?d.pagerEl=q(d.settings.pagerCustom):(d.pagerEl=q('<div class="bx-pager" />'),d.settings.pagerSelector?q(d.settings.pagerSelector).html(d.pagerEl):d.controls.el.addClass("bx-has-pager").append(d.pagerEl),v()),d.pagerEl.on("click touchend","a",G)},m=function(){d.controls.next=q('<a class="bx-next" href="">'+d.settings.nextText+"</a>"),d.controls.prev=q('<a class="bx-prev" href="">'+d.settings.prevText+"</a>"),d.controls.next.on("click touchend",y),d.controls.prev.on("click touchend",M),d.settings.nextSelector&&q(d.settings.nextSelector).append(d.controls.next),d.settings.prevSelector&&q(d.settings.prevSelector).append(d.controls.prev),d.settings.nextSelector||d.settings.prevSelector||(d.controls.directionEl=q('<div class="bx-controls-direction" />'),d.controls.directionEl.append(d.controls.prev).append(d.controls.next),d.controls.el.addClass("bx-has-controls-direction").append(d.controls.directionEl))},P=function(){d.controls.start=q('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+d.settings.startText+"</a></div>"),d.controls.stop=q('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+d.settings.stopText+"</a></div>"),d.controls.autoEl=q('<div class="bx-controls-auto" />'),d.controls.autoEl.on("click",".bx-start",C),d.controls.autoEl.on("click",".bx-stop",x),d.settings.autoControlsCombine?d.controls.autoEl.append(d.controls.start):d.controls.autoEl.append(d.controls.start).append(d.controls.stop),d.settings.autoControlsSelector?q(d.settings.autoControlsSelector).html(d.controls.autoEl):d.controls.el.addClass("bx-has-controls-auto").append(d.controls.autoEl),H(d.settings.autoStart?"stop":"start")},A=function(){d.children.each(function(e){var t=q(this).find("img:first").attr("title");void 0!==t&&(""+t).length&&q(this).append('<div class="bx-caption"><span>'+t+"</span></div>")})},y=function(e){e.preventDefault(),d.controls.el.hasClass("disabled")||(d.settings.auto&&d.settings.stopAutoOnClick&&p.stopAuto(),p.goToNextSlide())},M=function(e){e.preventDefault(),d.controls.el.hasClass("disabled")||(d.settings.auto&&d.settings.stopAutoOnClick&&p.stopAuto(),p.goToPrevSlide())},C=function(e){p.startAuto(),e.preventDefault()},x=function(e){p.stopAuto(),e.preventDefault()},G=function(e){var t,n;e.preventDefault(),d.controls.el.hasClass("disabled")||(d.settings.auto&&d.settings.stopAutoOnClick&&p.stopAuto(),void 0!==(t=q(e.currentTarget)).attr("data-slide-index")&&(n=parseInt(t.attr("data-slide-index")))!==d.active.index&&p.goToSlide(n))},w=function(n){var e=d.children.length;if("short"===d.settings.pagerType)return 1<d.settings.maxSlides&&(e=Math.ceil(d.children.length/d.settings.maxSlides)),void d.pagerEl.html(n+1+d.settings.pagerShortSeparator+e);d.pagerEl.find("a").removeClass("active"),d.pagerEl.each(function(e,t){q(t).find("a").eq(n).addClass("active")})},E=function(){var e;d.settings.infiniteLoop&&(e="",0===d.active.index?e=d.children.eq(0).position():d.active.index===h()-1&&d.carousel?e=d.children.eq((h()-1)*T()).position():d.active.index===d.children.length-1&&(e=d.children.eq(d.children.length-1).position()),e&&("horizontal"===d.settings.mode?S(-e.left,"reset",0):"vertical"===d.settings.mode&&S(-e.top,"reset",0))),d.working=!1,d.settings.onSlideAfter.call(p,d.children.eq(d.active.index),d.oldIndex,d.active.index)},H=function(e){d.settings.autoControlsCombine?d.controls.autoEl.html(d.controls[e]):(d.controls.autoEl.find("a").removeClass("active"),d.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},B=function(){1===h()?(d.controls.prev.addClass("disabled"),d.controls.next.addClass("disabled")):!d.settings.infiniteLoop&&d.settings.hideControlOnEnd&&(0===d.active.index?(d.controls.prev.addClass("disabled"),d.controls.next.removeClass("disabled")):d.active.index===h()-1?(d.controls.next.addClass("disabled"),d.controls.prev.removeClass("disabled")):(d.controls.prev.removeClass("disabled"),d.controls.next.removeClass("disabled")))},D=function(){p.startAuto()},I=function(){p.stopAuto()},L=function(){0<d.settings.autoDelay?setTimeout(p.startAuto,d.settings.autoDelay):(p.startAuto(),q(window).focus(D).blur(I)),d.settings.autoHover&&p.hover(function(){d.interval&&(p.stopAuto(!0),d.autoPaused=!0)},function(){d.autoPaused&&(p.startAuto(!0),d.autoPaused=null)})},N=function(){var e,t,n,i,o,r,a,s,l=0;"next"===d.settings.autoDirection?p.append(d.children.clone().addClass("bx-clone")):(p.prepend(d.children.clone().addClass("bx-clone")),e=d.children.first().position(),l="horizontal"===d.settings.mode?-e.left:-e.top),S(l,"reset",0),d.settings.pager=!1,d.settings.controls=!1,d.settings.autoControls=!1,d.settings.tickerHover&&(d.usingCSS?(i="horizontal"===d.settings.mode?4:5,d.viewport.hover(function(){t=p.css("-"+d.cssPrefix+"-transform"),n=parseFloat(t.split(",")[i]),S(n,"reset",0)},function(){s=0,d.children.each(function(e){s+="horizontal"===d.settings.mode?q(this).outerWidth(!0):q(this).outerHeight(!0)}),o=d.settings.speed/s,r="horizontal"===d.settings.mode?"left":"top",a=o*(s-Math.abs(parseInt(n))),k(a)})):d.viewport.hover(function(){p.stop()},function(){s=0,d.children.each(function(e){s+="horizontal"===d.settings.mode?q(this).outerWidth(!0):q(this).outerHeight(!0)}),o=d.settings.speed/s,r="horizontal"===d.settings.mode?"left":"top",a=o*(s-Math.abs(parseInt(p.css(r)))),k(a)})),k()},k=function(e){var t,n,i=e||d.settings.speed,o={left:0,top:0},r={left:0,top:0};"next"===d.settings.autoDirection?o=p.find(".bx-clone").first().position():r=d.children.first().position(),t="horizontal"===d.settings.mode?-o.left:-o.top,n="horizontal"===d.settings.mode?-r.left:-r.top,S(t,"ticker",i,{resetValue:n})},O=function(e){var t,n,i,o,r=document.activeElement.tagName.toLowerCase();if(null==new RegExp(r,["i"]).exec("input|textarea")&&(t=p,n=q(window),i={top:n.scrollTop(),left:n.scrollLeft()},o=t.offset(),i.right=i.left+n.width(),i.bottom=i.top+n.height(),o.right=o.left+t.outerWidth(),o.bottom=o.top+t.outerHeight(),!(i.right<o.left||i.left>o.right||i.bottom<o.top||i.top>o.bottom))){if(39===e.keyCode)return y(e),!1;if(37===e.keyCode)return M(e),!1}},V=function(){d.touch={start:{x:0,y:0},end:{x:0,y:0}},d.viewport.on("touchstart MSPointerDown pointerdown",R),d.viewport.on("click",".bxslider a",function(e){d.viewport.hasClass("click-disabled")&&(e.preventDefault(),d.viewport.removeClass("click-disabled"))})},R=function(e){if("touchstart"===e.type||0===e.button)if(e.preventDefault(),d.controls.el.addClass("disabled"),d.working)d.controls.el.removeClass("disabled");else{d.touch.originalPos=p.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];if("function"==typeof PointerEvent&&void 0===t.pointerId)return;d.touch.start.x=n[0].pageX,d.touch.start.y=n[0].pageY,d.viewport.get(0).setPointerCapture&&(d.pointerId=t.pointerId,d.viewport.get(0).setPointerCapture(d.pointerId)),d.originalClickTarget=t.originalTarget||t.target,d.originalClickButton=t.button,d.originalClickButtons=t.buttons,d.originalEventType=t.type,d.hasMove=!1,d.viewport.on("touchmove MSPointerMove pointermove",X),d.viewport.on("touchend MSPointerUp pointerup",W),d.viewport.on("MSPointerCancel pointercancel",F)}},F=function e(t){t.preventDefault(),S(d.touch.originalPos.left,"reset",0),d.controls.el.removeClass("disabled"),d.viewport.off("MSPointerCancel pointercancel",e),d.viewport.off("touchmove MSPointerMove pointermove",X),d.viewport.off("touchend MSPointerUp pointerup",W),d.viewport.get(0).releasePointerCapture&&d.viewport.get(0).releasePointerCapture(d.pointerId)},X=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-d.touch.start.x),o=Math.abs(n[0].pageY-d.touch.start.y),r=0,a=0;d.hasMove=!0,(o<3*i&&d.settings.preventDefaultSwipeX||i<3*o&&d.settings.preventDefaultSwipeY)&&e.preventDefault(),"touchmove"!==e.type&&e.preventDefault(),"fade"!==d.settings.mode&&d.settings.oneToOneTouch&&(r="horizontal"===d.settings.mode?(a=n[0].pageX-d.touch.start.x,d.touch.originalPos.left+a):(a=n[0].pageY-d.touch.start.y,d.touch.originalPos.top+a),S(r,"reset",0))},W=function e(t){t.preventDefault(),d.viewport.off("touchmove MSPointerMove pointermove",X),d.controls.el.removeClass("disabled");var n=t.originalEvent,i=void 0!==n.changedTouches?n.changedTouches:[n],o=0,r=0;d.touch.end.x=i[0].pageX,d.touch.end.y=i[0].pageY,"fade"===d.settings.mode?(r=Math.abs(d.touch.start.x-d.touch.end.x))>=d.settings.swipeThreshold&&(d.touch.start.x>d.touch.end.x?p.goToNextSlide():p.goToPrevSlide(),p.stopAuto()):(o="horizontal"===d.settings.mode?(r=d.touch.end.x-d.touch.start.x,d.touch.originalPos.left):(r=d.touch.end.y-d.touch.start.y,d.touch.originalPos.top),(d.settings.infiniteLoop||!(0===d.active.index&&0<r||d.active.last&&r<0))&&Math.abs(r)>=d.settings.swipeThreshold?(r<0?p.goToNextSlide():p.goToPrevSlide(),p.stopAuto()):S(o,"reset",200)),d.viewport.off("touchend MSPointerUp pointerup",e),d.viewport.get(0).releasePointerCapture&&d.viewport.get(0).releasePointerCapture(d.pointerId),!1!==d.hasMove||0!==d.originalClickButton&&"touchstart"!==d.originalEventType||q(d.originalClickTarget).trigger({type:"click",button:d.originalClickButton,buttons:d.originalClickButtons})},_=function e(t){var n,i;d.initialized&&(d.working?window.setTimeout(e,10):(n=q(window).width(),i=q(window).height(),o===n&&r===i||(o=n,r=i,p.redrawSlider(),d.settings.onSliderResize.call(p,d.active.index))))},j=function(e){var t=c();d.settings.ariaHidden&&!d.settings.ticker&&(d.children.attr("aria-hidden","true"),d.children.slice(e,e+t).attr("aria-hidden","false"))};return p.goToSlide=function(e,t){var n,i,o,r,a,s=!0,l=0,u={left:0,top:0},c=null;if(d.oldIndex=d.active.index,d.active.index=(a=e)<0?d.settings.infiniteLoop?h()-1:d.active.index:a>=h()?d.settings.infiniteLoop?0:d.active.index:a,!d.working&&d.active.index!==d.oldIndex){if(d.working=!0,void 0!==(s=d.settings.onSlideBefore.call(p,d.children.eq(d.active.index),d.oldIndex,d.active.index))&&!s)return d.active.index=d.oldIndex,void(d.working=!1);"next"===t?d.settings.onSlideNext.call(p,d.children.eq(d.active.index),d.oldIndex,d.active.index)||(s=!1):"prev"===t&&(d.settings.onSlidePrev.call(p,d.children.eq(d.active.index),d.oldIndex,d.active.index)||(s=!1)),d.active.last=d.active.index>=h()-1,(d.settings.pager||d.settings.pagerCustom)&&w(d.active.index),d.settings.controls&&B(),"fade"===d.settings.mode?(d.settings.adaptiveHeight&&d.viewport.height()!==f()&&d.viewport.animate({height:f()},d.settings.adaptiveHeightSpeed),d.children.filter(":visible").fadeOut(d.settings.speed).css({zIndex:0}),d.children.eq(d.active.index).css("zIndex",d.settings.slideZIndex+1).fadeIn(d.settings.speed,function(){q(this).css("zIndex",d.settings.slideZIndex),E()})):(d.settings.adaptiveHeight&&d.viewport.height()!==f()&&d.viewport.animate({height:f()},d.settings.adaptiveHeightSpeed),!d.settings.infiniteLoop&&d.carousel&&d.active.last?"horizontal"===d.settings.mode?(u=(c=d.children.eq(d.children.length-1)).position(),l=d.viewport.width()-c.outerWidth()):(n=d.children.length-d.settings.minSlides,u=d.children.eq(n).position()):d.carousel&&d.active.last&&"prev"===t?(i=1===d.settings.moveSlides?d.settings.maxSlides-T():(h()-1)*T()-(d.children.length-d.settings.maxSlides),u=(c=p.children(".bx-clone").eq(i)).position()):"next"===t&&0===d.active.index?(u=p.find("> .bx-clone").eq(d.settings.maxSlides).position(),d.active.last=!1):0<=e&&(r=e*parseInt(T()),u=d.children.eq(r).position()),void 0!==u&&(o="horizontal"===d.settings.mode?-(u.left-l):-u.top,S(o,"slide",d.settings.speed)),d.working=!1),d.settings.ariaHidden&&j(d.active.index*T())}},p.goToNextSlide=function(){var e;!d.settings.infiniteLoop&&d.active.last||!0!==d.working&&(e=parseInt(d.active.index)+1,p.goToSlide(e,"next"))},p.goToPrevSlide=function(){var e;!d.settings.infiniteLoop&&0===d.active.index||!0===d.working||(e=parseInt(d.active.index)-1,p.goToSlide(e,"prev"))},p.startAuto=function(e){d.interval||(d.interval=setInterval(function(){"next"===d.settings.autoDirection?p.goToNextSlide():p.goToPrevSlide()},d.settings.pause),d.settings.onAutoChange.call(p,!0),d.settings.autoControls&&!0!==e&&H("stop"))},p.stopAuto=function(e){d.autoPaused&&(d.autoPaused=!1),d.interval&&(clearInterval(d.interval),d.interval=null,d.settings.onAutoChange.call(p,!1),d.settings.autoControls&&!0!==e&&H("start"))},p.getCurrentSlide=function(){return d.active.index},p.getCurrentSlideElement=function(){return d.children.eq(d.active.index)},p.getSlideElement=function(e){return d.children.eq(e)},p.getSlideCount=function(){return d.children.length},p.isWorking=function(){return d.working},p.redrawSlider=function(){d.children.add(p.find(".bx-clone")).outerWidth(u()),d.viewport.css("height",f()),d.settings.ticker||g(),d.active.last&&(d.active.index=h()-1),d.active.index>=h()&&(d.active.last=!0),d.settings.pager&&!d.settings.pagerCustom&&(v(),w(d.active.index)),d.settings.ariaHidden&&j(d.active.index*T())},p.destroySlider=function(){d.initialized&&(d.initialized=!1,q(".bx-clone",this).remove(),d.children.each(function(){void 0!==q(this).data("origStyle")?q(this).attr("style",q(this).data("origStyle")):q(this).removeAttr("style")}),void 0!==q(this).data("origStyle")?this.attr("style",q(this).data("origStyle")):q(this).removeAttr("style"),q(this).unwrap().unwrap(),d.controls.el&&d.controls.el.remove(),d.controls.next&&d.controls.next.remove(),d.controls.prev&&d.controls.prev.remove(),d.pagerEl&&d.settings.controls&&!d.settings.pagerCustom&&d.pagerEl.remove(),q(".bx-caption",this).remove(),d.controls.autoEl&&d.controls.autoEl.remove(),clearInterval(d.interval),d.settings.responsive&&q(window).off("resize",_),d.settings.keyboardEnabled&&q(document).off("keydown",O),q(this).removeData("bxSlider"),q(window).off("blur",I).off("focus",D))},p.reloadSlider=function(e){void 0!==e&&(t=e),p.destroySlider(),n(),q(p).data("bxSlider",this)},n(),q(p).data("bxSlider",this),this}}}(jQuery),function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):"undefined"!=typeof module&&module.exports?e(require("jquery")):e(jQuery)}(function(se){var le="left",ue="right",ce="up",de="down",pe="in",fe="out",he="none",Te="auto",ge="swipe",Se="pinch",ve="tap",be="doubletap",me="longtap",Pe="horizontal",Ae="vertical",ye="all",Me=10,Ce="start",xe="move",Ge="end",we="cancel",Ee="ontouchstart"in window,He=window.navigator.msPointerEnabled&&!window.PointerEvent&&!Ee,Be=(window.PointerEvent||window.navigator.msPointerEnabled)&&!Ee,De="TouchSwipe";function i(e,f){var f=se.extend({},f),t=Ee||Be||!f.fallbackToMouseEvents,n=t?Be?He?"MSPointerDown":"pointerdown":"touchstart":"mousedown",i=t?Be?He?"MSPointerMove":"pointermove":"touchmove":"mousemove",o=t?Be?He?"MSPointerUp":"pointerup":"touchend":"mouseup",r=!t||Be?"mouseleave":null,a=Be?He?"MSPointerCancel":"pointercancel":"touchcancel",h=0,T=null,g=null,S=0,v=0,b=0,m=1,P=0,A=0,y=null,s=se(e),M="start",C=0,x={},l=0,G=0,u=0,c=0,d=0,p=null,w=null;try{s.on(n,E),s.on(a,D)}catch(e){se.error("events not supported "+n+","+a+" on jQuery.swipe")}function E(e){if(!0!==s.data(De+"_intouch")&&!(0<se(e.target).closest(f.excludedElements,s).length)){var t=e.originalEvent?e.originalEvent:e;if(!t.pointerType||"mouse"!=t.pointerType||0!=f.fallbackToMouseEvents){var n,i,o=t.touches,r=o?o[0]:t;return(M=Ce,o?C=o.length:!1!==f.preventDefaultEvents&&e.preventDefault(),A=g=T=null,m=1,P=b=v=S=h=0,(i={})[le]=ne(le),i[ue]=ne(ue),i[ce]=ne(ce),i[de]=ne(de),y=i,Q(),J(0,r),!o||C===f.fingers||f.fingers===ye||W()?(l=ae(),2==C&&(J(1,o[1]),v=b=oe(x[0].start,x[1].start)),(f.swipeStatus||f.pinchStatus)&&(n=k(t,M))):n=!1,!1===n)?(k(t,M=we),n):(f.hold&&(w=setTimeout(se.proxy(function(){s.trigger("hold",[t.target]),f.hold&&(n=f.hold.call(s,t,t.target))},this),f.longTapThreshold)),Z(!0),null)}}}function H(e){var t,n,i,o,r,a,s,l,u,c,d,p=e.originalEvent?e.originalEvent:e;M===Ge||M===we||Y()||(i=ee((n=p.touches)?n[0]:p),G=ae(),n&&(C=n.length),f.hold&&clearTimeout(w),M=xe,2==C&&(0==v?(J(1,n[1]),v=b=oe(x[0].start,x[1].start)):(ee(n[1]),b=oe(x[0].end,x[1].end),x[0].end,x[1].end,A=m<1?fe:pe),m=(b/v*1).toFixed(2),P=Math.abs(v-b)),C===f.fingers||f.fingers===ye||!n||W()?(T=re(i.start,i.end),function(e,t){if(!1===f.preventDefaultEvents)return;if(f.allowPageScroll===he)e.preventDefault();else{var n=f.allowPageScroll===Te;switch(t){case le:(f.swipeLeft&&n||!n&&f.allowPageScroll!=Pe)&&e.preventDefault();break;case ue:(f.swipeRight&&n||!n&&f.allowPageScroll!=Pe)&&e.preventDefault();break;case ce:(f.swipeUp&&n||!n&&f.allowPageScroll!=Ae)&&e.preventDefault();break;case de:(f.swipeDown&&n||!n&&f.allowPageScroll!=Ae)&&e.preventDefault()}}}(e,g=re(i.last,i.end)),c=i.start,d=i.end,h=Math.round(Math.sqrt(Math.pow(d.x-c.x,2)+Math.pow(d.y-c.y,2))),S=ie(),function(e,t){if(e==he)return;t=Math.max(t,te(e)),y[e].distance=t}(T,h),t=k(p,M),f.triggerOnTouchEnd&&!f.triggerOnTouchLeave||(o=!0,f.triggerOnTouchLeave&&(r={left:(u=(l=se(l=this)).offset()).left,right:u.left+l.outerWidth(),top:u.top,bottom:u.top+l.outerHeight()},a=i.end,s=r,o=a.x>s.left&&a.x<s.right&&a.y>s.top&&a.y<s.bottom),!f.triggerOnTouchEnd&&o?M=N(xe):f.triggerOnTouchLeave&&!o&&(M=N(Ge)),M!=we&&M!=Ge||k(p,M))):k(p,M=we),!1===t&&k(p,M=we))}function B(e){var t,n=e.originalEvent?e.originalEvent:e,i=n.touches;if(i){if(i.length&&!Y())return t=n,u=ae(),c=t.touches.length+1,!0;if(i.length&&Y())return!0}return Y()&&(C=c),G=ae(),S=ie(),R()||!V()?k(n,M=we):f.triggerOnTouchEnd||!1===f.triggerOnTouchEnd&&M===xe?(!1!==f.preventDefaultEvents&&!1!==e.cancelable&&e.preventDefault(),k(n,M=Ge)):!f.triggerOnTouchEnd&&K()?O(n,M=Ge,ve):M===xe&&k(n,M=we),Z(!1),null}function D(){b=v=l=G=C=0,Q(),Z(!(m=1))}function I(e){var t=e.originalEvent?e.originalEvent:e;f.triggerOnTouchLeave&&k(t,M=N(Ge))}function L(){s.off(n,E),s.off(a,D),s.off(i,H),s.off(o,B),r&&s.off(r,I),Z(!1)}function N(e){var t=e,n=F(),i=V(),o=R();return!n||o?t=we:!i||e!=xe||f.triggerOnTouchEnd&&!f.triggerOnTouchLeave?!i&&e==Ge&&f.triggerOnTouchLeave&&(t=we):t=Ge,t}function k(e,t){var n,i=e.touches;return(_()&&j()||j())&&(n=O(e,t,ge)),(X()&&W()||W())&&!1!==n&&(n=O(e,t,Se)),$()&&z()&&!1!==n?n=O(e,t,be):S>f.longTapThreshold&&h<Me&&f.longTap&&!1!==n?n=O(e,t,me):1!==C&&Ee||!(isNaN(h)||h<f.threshold)||!K()||!1===n||(n=O(e,t,ve)),t===we&&D(),t===Ge&&(i&&i.length||D()),n}function O(e,t,n){var i;if(n==ge){if(s.trigger("swipeStatus",[t,T||null,h||0,S||0,C,x,g]),f.swipeStatus&&!1===(i=f.swipeStatus.call(s,e,t,T||null,h||0,S||0,C,x,g)))return!1;if(t==Ge&&_()){if(clearTimeout(p),clearTimeout(w),s.trigger("swipe",[T,h,S,C,x,g]),f.swipe&&!1===(i=f.swipe.call(s,e,T,h,S,C,x,g)))return!1;switch(T){case le:s.trigger("swipeLeft",[T,h,S,C,x,g]),f.swipeLeft&&(i=f.swipeLeft.call(s,e,T,h,S,C,x,g));break;case ue:s.trigger("swipeRight",[T,h,S,C,x,g]),f.swipeRight&&(i=f.swipeRight.call(s,e,T,h,S,C,x,g));break;case ce:s.trigger("swipeUp",[T,h,S,C,x,g]),f.swipeUp&&(i=f.swipeUp.call(s,e,T,h,S,C,x,g));break;case de:s.trigger("swipeDown",[T,h,S,C,x,g]),f.swipeDown&&(i=f.swipeDown.call(s,e,T,h,S,C,x,g))}}}if(n==Se){if(s.trigger("pinchStatus",[t,A||null,P||0,S||0,C,m,x]),f.pinchStatus&&!1===(i=f.pinchStatus.call(s,e,t,A||null,P||0,S||0,C,m,x)))return!1;if(t==Ge&&X())switch(A){case pe:s.trigger("pinchIn",[A||null,P||0,S||0,C,m,x]),f.pinchIn&&(i=f.pinchIn.call(s,e,A||null,P||0,S||0,C,m,x));break;case fe:s.trigger("pinchOut",[A||null,P||0,S||0,C,m,x]),f.pinchOut&&(i=f.pinchOut.call(s,e,A||null,P||0,S||0,C,m,x))}}return n==ve?t!==we&&t!==Ge||(clearTimeout(p),clearTimeout(w),z()&&!$()?(d=ae(),p=setTimeout(se.proxy(function(){d=null,s.trigger("tap",[e.target]),f.tap&&(i=f.tap.call(s,e,e.target))},this),f.doubleTapThreshold)):(d=null,s.trigger("tap",[e.target]),f.tap&&(i=f.tap.call(s,e,e.target)))):n==be?t!==we&&t!==Ge||(clearTimeout(p),clearTimeout(w),d=null,s.trigger("doubletap",[e.target]),f.doubleTap&&(i=f.doubleTap.call(s,e,e.target))):n==me&&(t!==we&&t!==Ge||(clearTimeout(p),d=null,s.trigger("longtap",[e.target]),f.longTap&&(i=f.longTap.call(s,e,e.target)))),i}function V(){var e=!0;return null!==f.threshold&&(e=h>=f.threshold),e}function R(){var e=!1;return null!==f.cancelThreshold&&null!==T&&(e=te(T)-h>=f.cancelThreshold),e}function F(){var e=!f.maxTimeThreshold||!(S>=f.maxTimeThreshold);return e}function X(){var e=q(),t=U(),n=null===f.pinchThreshold||P>=f.pinchThreshold;return e&&t&&n}function W(){return f.pinchStatus||f.pinchIn||f.pinchOut}function _(){var e=F(),t=V(),n=q(),i=U();return!R()&&i&&n&&t&&e}function j(){return f.swipe||f.swipeStatus||f.swipeLeft||f.swipeRight||f.swipeUp||f.swipeDown}function q(){return C===f.fingers||f.fingers===ye||!Ee}function U(){return 0!==x[0].end.x}function K(){return f.tap}function z(){return!!f.doubleTap}function $(){if(null==d)return!1;var e=ae();return z()&&e-d<=f.doubleTapThreshold}function Q(){c=u=0}function Y(){var e=!1;return u&&ae()-u<=f.fingerReleaseThreshold&&(e=!0),e}function Z(e){s&&(!0===e?(s.on(i,H),s.on(o,B),r&&s.on(r,I)):(s.off(i,H,!1),s.off(o,B,!1),r&&s.off(r,I,!1)),s.data(De+"_intouch",!0===e))}function J(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,x[e]=n}function ee(e){var t=void 0!==e.identifier?e.identifier:0,n=x[t]||null;return null===n&&(n=J(t,e)),n.last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function te(e){if(y[e])return y[e].distance}function ne(e){return{direction:e,distance:0}}function ie(){return G-l}function oe(e,t){var n=Math.abs(e.x-t.x),i=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+i*i))}function re(e,t){if(i=t,(n=e).x==i.x&&n.y==i.y)return he;var n,i,o,r,a,s,l,u,c=(r=t,a=(o=e).x-r.x,s=r.y-o.y,l=Math.atan2(s,a),(u=Math.round(180*l/Math.PI))<0&&(u=360-Math.abs(u)),u);return c<=45&&0<=c||c<=360&&315<=c?le:135<=c&&c<=225?ue:45<c&&c<135?de:ce}function ae(){return(new Date).getTime()}this.enable=function(){return this.disable(),s.on(n,E),s.on(a,D),s},this.disable=function(){return L(),s},this.destroy=function(){L(),s.data(De,null),s=null},this.option=function(e,t){if("object"===_typeof(e))f=se.extend(f,e);else if(void 0!==f[e]){if(void 0===t)return f[e];f[e]=t}else{if(!e)return f;se.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}se.fn.swipe=function(e){var t=se(this),n=t.data(De);if(n&&"string"==typeof e){if(n[e])return n[e].apply(n,Array.prototype.slice.call(arguments,1));se.error("Method "+e+" does not exist on jQuery.swipe")}else if(n&&"object"===_typeof(e))n.option.apply(n,arguments);else if(!(n||"object"!==_typeof(e)&&e))return function(n){!n||void 0!==n.allowPageScroll||void 0===n.swipe&&void 0===n.swipeStatus||(n.allowPageScroll=he);void 0!==n.click&&void 0===n.tap&&(n.tap=n.click);n=n||{};return n=se.extend({},se.fn.swipe.defaults,n),this.each(function(){var e=se(this),t=e.data(De);t||(t=new i(this,n),e.data(De,t))})}.apply(this,arguments);return t},se.fn.swipe.version="1.6.18",se.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},se.fn.swipe.phases={PHASE_START:Ce,PHASE_MOVE:xe,PHASE_END:Ge,PHASE_CANCEL:we},se.fn.swipe.directions={LEFT:le,RIGHT:ue,UP:ce,DOWN:de,IN:pe,OUT:fe},se.fn.swipe.pageScroll={NONE:he,HORIZONTAL:Pe,VERTICAL:Ae,AUTO:Te},se.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:ye}}),function(d){(function(){if(typeof module!=="undefined"&&module.exports){return function(e){module.exports=e()}}else if(typeof define==="function"&&define.amd){return define}else if(typeof window!=="undefined"){return function(e){window.MobileDetect=e()}}else{throw new Error("unknown environment")}})()(function(){var s,l={mobileDetectRules:{phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6",Dell:"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",Samsung:"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533",Asus:"Asus.*Galaxy|PadFone.*Mobile",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo (3DS|Switch)",Amoi:"Amoi",INQ:"INQ",OnePlus:"ONEPLUS",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",GoogleTablet:"Android.*Pixel C",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z930|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android.*\\bG1\\b(?!\\))",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9|TECNO DP8D",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",VerizonTablet:"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MediacomTablet:"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",iPadOS:"CPU OS 13",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari",WeChat:"\\bMicroMessenger\\b",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]",UCBrowser:["UCWEB[VER]","UC.*Browser/[VER]"],MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},detectMobileBrowsers:{fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i}},u=Object.prototype.hasOwnProperty;function t(e,t){return null!=e&&null!=t&&e.toLowerCase()===t.toLowerCase()}function n(e,t){var n,i,o=e.length;if(!o||!t)return!1;for(n=t.toLowerCase(),i=0;i<o;++i)if(n===e[i].toLowerCase())return!0;return!1}function c(e){for(var t in e)u.call(e,t)&&(e[t]=new RegExp(e[t],"i"))}function a(e,t){this.ua=(e||"").substr(0,500),this._cache={},this.maxPhoneWidth=t||600}return l.FALLBACK_PHONE="UnknownPhone",l.FALLBACK_TABLET="UnknownTablet",l.FALLBACK_MOBILE="UnknownMobile",s="isArray"in Array?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},function(){var e,t,n,i,o,r,a=l.mobileDetectRules;for(e in a.props)if(u.call(a.props,e)){for(t=a.props[e],s(t)||(t=[t]),o=t.length,i=0;i<o;++i)0<=(r=(n=t[i]).indexOf("[VER]"))&&(n=n.substring(0,r)+"([\\w._\\+]+)"+n.substring(r+5)),t[i]=new RegExp(n,"i");a.props[e]=t}c(a.oss),c(a.phones),c(a.tablets),c(a.uas),c(a.utils),a.oss0={WindowsPhoneOS:a.oss.WindowsPhoneOS,WindowsMobileOS:a.oss.WindowsMobileOS}}(),l.findMatch=function(e,t){for(var n in e)if(u.call(e,n)&&e[n].test(t))return n;return null},l.findMatches=function(e,t){var n=[];for(var i in e)u.call(e,i)&&e[i].test(t)&&n.push(i);return n},l.getVersionStr=function(e,t){var n,i,o,r,a=l.mobileDetectRules.props;if(u.call(a,e))for(o=(n=a[e]).length,i=0;i<o;++i)if(null!==(r=n[i].exec(t)))return r[1];return null},l.getVersion=function(e,t){var n=l.getVersionStr(e,t);return n?l.prepareVersionNo(n):NaN},l.prepareVersionNo=function(e){var t=e.split(/[a-z._ \/\-]/i);return 1===t.length&&(e=t[0]),1<t.length&&(e=t[0]+".",t.shift(),e+=t.join("")),Number(e)},l.isMobileFallback=function(e){return l.detectMobileBrowsers.fullPattern.test(e)||l.detectMobileBrowsers.shortPattern.test(e.substr(0,4))},l.isTabletFallback=function(e){return l.detectMobileBrowsers.tabletPattern.test(e)},l.prepareDetectionCache=function(e,t,n){if(e.mobile===d){var i,o,r=l.findMatch(l.mobileDetectRules.tablets,t);if(r)return e.mobile=e.tablet=r,void(e.phone=null);if(i=l.findMatch(l.mobileDetectRules.phones,t))return e.mobile=e.phone=i,void(e.tablet=null);l.isMobileFallback(t)?(o=a.isPhoneSized(n))===d?(e.mobile=l.FALLBACK_MOBILE,e.tablet=e.phone=null):o?(e.mobile=e.phone=l.FALLBACK_PHONE,e.tablet=null):(e.mobile=e.tablet=l.FALLBACK_TABLET,e.phone=null):l.isTabletFallback(t)?(e.mobile=e.tablet=l.FALLBACK_TABLET,e.phone=null):e.mobile=e.tablet=e.phone=null}},l.mobileGrade=function(e){var t=null!==e.mobile();return e.os("iOS")&&4.3<=e.version("iPad")||e.os("iOS")&&3.1<=e.version("iPhone")||e.os("iOS")&&3.1<=e.version("iPod")||2.1<e.version("Android")&&e.is("Webkit")||7<=e.version("Windows Phone OS")||e.is("BlackBerry")&&6<=e.version("BlackBerry")||e.match("Playbook.*Tablet")||1.4<=e.version("webOS")&&e.match("Palm|Pre|Pixi")||e.match("hp.*TouchPad")||e.is("Firefox")&&12<=e.version("Firefox")||e.is("Chrome")&&e.is("AndroidOS")&&4<=e.version("Android")||e.is("Skyfire")&&4.1<=e.version("Skyfire")&&e.is("AndroidOS")&&2.3<=e.version("Android")||e.is("Opera")&&11<e.version("Opera Mobi")&&e.is("AndroidOS")||e.is("MeeGoOS")||e.is("Tizen")||e.is("Dolfin")&&2<=e.version("Bada")||(e.is("UC Browser")||e.is("Dolfin"))&&2.3<=e.version("Android")||e.match("Kindle Fire")||e.is("Kindle")&&3<=e.version("Kindle")||e.is("AndroidOS")&&e.is("NookTablet")||11<=e.version("Chrome")&&!t||5<=e.version("Safari")&&!t||4<=e.version("Firefox")&&!t||7<=e.version("MSIE")&&!t||10<=e.version("Opera")&&!t?"A":e.os("iOS")&&e.version("iPad")<4.3||e.os("iOS")&&e.version("iPhone")<3.1||e.os("iOS")&&e.version("iPod")<3.1||e.is("Blackberry")&&5<=e.version("BlackBerry")&&e.version("BlackBerry")<6||5<=e.version("Opera Mini")&&e.version("Opera Mini")<=6.5&&(2.3<=e.version("Android")||e.is("iOS"))||e.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||11<=e.version("Opera Mobi")&&e.is("SymbianOS")?"B":(e.version("BlackBerry")<5||e.match("MSIEMobile|Windows CE.*Mobile")||e.version("Windows Mobile"),"C")},l.detectOS=function(e){return l.findMatch(l.mobileDetectRules.oss0,e)||l.findMatch(l.mobileDetectRules.oss,e)},l.getDeviceSmallerSide=function(){return window.screen.width<window.screen.height?window.screen.width:window.screen.height},a.prototype={constructor:a,mobile:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===d&&(this._cache.userAgent=l.findMatch(l.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===d&&(this._cache.userAgents=l.findMatches(l.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===d&&(this._cache.os=l.detectOS(this.ua)),this._cache.os},version:function(e){return l.getVersion(e,this.ua)},versionStr:function(e){return l.getVersionStr(e,this.ua)},is:function(e){return n(this.userAgents(),e)||t(e,this.os())||t(e,this.phone())||t(e,this.tablet())||n(l.findMatches(l.mobileDetectRules.utils,this.ua),e)},match:function(e){return e instanceof RegExp||(e=new RegExp(e,"i")),e.test(this.ua)},isPhoneSized:function(e){return a.isPhoneSized(e||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===d&&(this._cache.grade=l.mobileGrade(this)),this._cache.grade}},"undefined"!=typeof window&&window.screen?a.isPhoneSized=function(e){return e<0?d:l.getDeviceSmallerSide()<=e}:a.isPhoneSized=function(){},a._impl=l,a.version="1.4.4 2019-09-21",a})}();var openHamburger=document.querySelector("#hamburger"),menu=document.querySelector(".menu__mobile"),cross=document.querySelector(".close");function toggleClass(e,t){e.classList.toggle(t)}openHamburger.addEventListener("click",function(e){e.preventDefault(),menu.classList.remove("hidden"),setTimeout(function(){toggleClass(menu,"open")},300)}),cross.addEventListener("click",function(e){e.preventDefault();menu.classList.remove("open"),setTimeout(function(){toggleClass(menu,"hidden")},300)}),$(document).ready(function(){function e(){$("body").width()<769?$(".menu").removeClass("menu").addClass("menu__mobile").addClass("hidden"):$(".menu__mobile").removeClass("menu__mobile").removeClass("hidden").addClass("menu")}e(),$(window).resize(e),$("body").on("scroll",function(e){console.log(event.deltaY)})}),$(".team__link").on("click",function(e){e.preventDefault();var t=$(this);t.next().toggleClass("team__open"),$(".team__desc").hasClass("team__open")&&($(".team__desc").removeClass("team__open"),t.next().toggleClass("team__open"))}),$(window).on("resize load",function(){$(".team__item").each(function(){var e=$(this).find(".team__img"),t=$(this).find(".team__desc");$(window).width()<=768?t.prepend(e):$(this).prepend(e)})});var slider=$(".product__list").bxSlider({pager:!1,controls:!1});$(".arrow--left").on("click",function(e){e.preventDefault(),slider.goToPrevSlide()}),$(".arrow--right").on("click",function(e){e.preventDefault(),slider.goToNextSlide()});var review=$(".reviews__item"),reviewSwitch=$(".reviews__switcher-link"),findBlockByAllias=function(n){return review.filter(function(e,t){return $(t).attr("data-linked-with")===n})};reviewSwitch.on("click",function(e){e.preventDefault();var t=$(e.currentTarget),n=t.attr("data-open"),i=findBlockByAllias(n),o=t.closest(".reviews__switcher-item");i.addClass("active").siblings().removeClass("active"),o.addClass("active").siblings().removeClass("active")});var validateFields=function(e,t){return t.forEach(function(e){e.removeClass("input-error"),""===e.val().trim()&&e.addClass("input-error")}),0===e.find(".input-error").length};$(".form").submit(function(e){e.preventDefault();var t,n=$(e.currentTarget),i=n.find("[name='name']"),o=n.find("[name='phone']"),r=n.find("[name='comment']"),a=n.find("[name='to']"),s=$("#modal"),l=s.find(".modal__content");s.removeClass("error-modal"),validateFields(n,[i,o,r,a])&&((t=$.ajax({url:"https://webdev-api.loftschool.com/sendmail",method:"post",data:{name:i.val(),phone:o.val(),comment:r.val(),to:a.val()}})).done(function(e){l.text(e.message)}),t.fail(function(e){var t=e.responseJSON.message;l.text(t),s.addClass("error-modal")}),t.always(function(){$.fancybox.open({src:"#modal",type:"inline"})}))}),$(".app-close-modal").on("click",function(e){e.preventDefault(),$.fancybox.close()});var myMap,mesureWidth=function(e){var t=$(window).width(),n=e.closest(".color__list").find(".color__link"),i=n.width(),o=i*n.length;return 929<t?630:480<t?t-o:t-i},openItem=function(e){$(window).width();var t=e.find(".color__desc"),n=mesureWidth(e);t.width(n),e.siblings().hasClass("active")&&closeItem(e.siblings()),e.addClass("active")},rightPos=function(e,t){return e.css("right",t)},closeItem=function(e){var t=e.closest(".color__list"),n=e.find(".color__desc");$(window).width()<=480&&setTimeout(rightPos,500,t,0),n.width(0),e.removeClass("active")},addWidth=function(e,t,n){return setTimeout(function(){n.addClass("active")},1e3),e.width(t)},openMobileItem=function(e,t,n){for(var i,o=e.find(".color__desc"),r=e.closest(".color__list"),a=e.find(".color__link"),s=n.find(".color__link"),l=e.width(),u=t-l,c=s.length-1,d=0;d<1+c;d++){a[0]==s[d]&&(i=-l*(c-d),r.css("right",i),s[d]==s[c]?addWidth(o,u,e):setTimeout(addWidth,400,o,u,e))}};$(".color__link").on("click",function(e){var t=$(window).width();e.preventDefault();var n=$(e.currentTarget).closest(".color__item"),i=$(".color__list").find(".color__item");n.hasClass("active")?closeItem(n):480<t?openItem(n):openMobileItem(n,t,i)}),$(".color__close").on("click",function(e){e.preventDefault();var t=$(e.currentTarget).closest(".color__item");t.hasClass("active")&&closeItem(t)});var init=function(){myMap=new ymaps.Map("map",{center:[55.731475,37.608342],zoom:14,controls:[]});var t=new ymaps.GeoObjectCollection({},{draggable:!1,iconLayout:"default#image",iconImageHref:"./img/icons/beats_map.png",iconImageSize:[46,57],iconImageOffset:[-35,-52]});[[55.723498,37.610035],[55.736809,37.618472],[55.731326,37.636255]].forEach(function(e){t.add(new ymaps.Placemark(e))}),myMap.geoObjects.add(t),myMap.behaviors.disable("scrollZoom"),myMap.behaviors.disable("drag"),myMap.behaviors.disable("multiTouch")};ymaps.ready(init);var flag=!1,section=$(".section"),display=$(".main-content"),sideMenu=$(".fixed-menu"),menuItem=$(".fixed-menu__item"),mobileDetect=new MobileDetect(window.navigator.userAgent),isMobile=mobileDetect.mobile();section.first().addClass("activeSection");var video,durationControl,soundControl,intervalId,soundLevel,sectionPos=function(e){var t=-100*e;return isNaN(t)?(console.error("ÐÐµÐ²ÐµÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ Ð² sectionPos"),0):t},changeMenu=function(e){var t="fixed-menu--black";"black"===section.eq(e).attr("data-sidemenu-theme")?sideMenu.addClass(t):sideMenu.removeClass(t)},resetActiveClass=function(e,t,n){e.eq(t).addClass(n).siblings().removeClass(n)},transition=function(e){var t;flag||(flag=!0,t=sectionPos(e),changeMenu(e),display.css({transform:"translateY(".concat(t,"%)")}),$(".fixed-menu"),resetActiveClass(section,e,"activeSection"),setTimeout(function(){flag=!1,resetActiveClass(menuItem,e,"fixed-menu__item--active")},1e3))},viewScroller=function(){var e=section.filter(".activeSection"),t=e.next(),n=e.prev();return{next:function(){t.length&&transition(t.index())},prev:function(){n.length&&transition(n.index())}}};$(window).on("wheel",function(e){var t=e.originalEvent.deltaY,n=viewScroller();0<t?n.next():t<0&&n.prev()}),$(window).on("keydown",function(e){var t=e.target.tagName.toLowerCase(),n="input"===t||"textarea"===t,i=viewScroller();if(!n)switch(e.keyCode){case 40:i.next();break;case 38:i.prev()}}),$(".wrapper").on("touchmove",function(e){return e.preventDefault()}),$("[data-scroll-to]").on("click",function(e){e.preventDefault(),toggleClass(menu,"open"),setTimeout(function(){toggleClass(menu,"hidden")},100);var t=$(e.currentTarget).attr("data-scroll-to"),n=$("[data-section-id=".concat(t,"]"));transition(n.index())}),isMobile&&$("body").swipe({swipe:function(e,t){var n=viewScroller(),i="down"===t?"prev":"up"===t?"next":"";i&&n[i]()}});var MAX_SOUND_VALUE=10;function playStop(){document.querySelector(".player").classList.toggle("player--active"),durationControl.max=video.duration,video.paused?(video.play(),intervalId=setInterval(updateDuration,1e3/66)):stopInterval()}function stopInterval(){video.pause(),clearInterval(intervalId)}function setVideoDuration(){video.currentTime=durationControl.value,intervalId=setInterval(updateDuration,1e3/66),video.paused&&video.play()}function updateDuration(){durationControl.value=video.currentTime}function soundOf(){0===video.volume?(video.volume=soundLevel,soundControl.value=soundLevel*MAX_SOUND_VALUE):(soundLevel=video.volume,video.volume=0,soundControl.value=0)}function changeSoundVolume(){video.volume=soundControl.value/MAX_SOUND_VALUE,console.log(video.volume)}$().ready(function(){(video=document.getElementById("video")).addEventListener("click",playStop);for(var e=document.querySelectorAll(".play"),t=e.length,n=0;n<t;n++)e[n].addEventListener("click",playStop);document.getElementById("mic").addEventListener("click",soundOf),(durationControl=document.getElementById("durationLevel")).addEventListener("mousedown",stopInterval),durationControl.addEventListener("mouseup",setVideoDuration),durationControl.min=0,durationControl.value=0,(soundControl=document.getElementById("micLevel")).addEventListener("mouseup",changeSoundVolume),soundControl.min=0,soundControl.max=MAX_SOUND_VALUE,video.addEventListener("ended",function(){},!1)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
